<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Michael Herman]]></title>
  <link href="http://mjhea0.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2012-12-27T10:47:11-08:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 5 - modifying the appearance and deploying the web form)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/"/>
    <updated>2012-12-10T07:39:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form</id>
    <content type="html"><![CDATA[<p>You made it. In this final tutorial I'll show you how to easily modify the form's appearance, and we'll deploy the app to PythonAnywhere.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed => <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">part 1</a></li>
<li>You know what a web form is</li>
<li>You created the skeleton web form => <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">part 2</a></li>
<li>You added data validation (with the help of Han Solo) => <a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">part 3</a></li>
<li>You learned how to easily add CRUD functions to manage records => <a href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/">part 4</a></li>
</ol>


<p>Let's get going ...</p>

<p>Launch the server. -> Go to the admin interface. -> Edit the "form" application.</p>

<p>So, by default web2py utilizes the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> front-end framework, which makes updating the layout and appearance easy.</p>

<h2><strong>Download New Layout Plugin</strong></h2>

<p>First, go to the web2py layout plugin <a href="http://web2py.com/layouts">page</a> to find a layout that you like. In this example, I used <a href="http://web2py.com/layouts/static/plugin_layouts/layouts/KeepitSimple/index.html">KeepitSimple</a>. Once you find one, go ahead and download the .w2p file.</p>

<p>Back on the admin page for the form, scroll to the bottom of the page, and upload the .w2p file beneath the Plugins section. Now, click the link for plugin_layouts and copy the name of the new file including the full path- <em>plugin_layouts/layouts/KeepitSimple.html</em>. Now, edit the display_your_form.html file and paste the new .html file in the very first line of the code, replacing layout.html-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-09_2303.png" alt="" /></p>

<p>Next, I'm going to remove the <em>Web Form</em> title between the h1 tags, remove the line breaks, and clean up the instructions. I'm also going to remove the <em>Submitted</em>, <em>Accepted</em>, and, <em>Errors</em>  sections, as the user does not need to see all that information. So the final code looks like this:</p>

<pre><code>{ {extend 'plugin_layouts/layouts/KeepitSimple.html'}}
&lt;p&gt;Please enter your first name, last name, and email address - thanks!&lt;/p&gt;
&lt;h2&gt;Inputs:&lt;/h2&gt;
{ {=form}}
</code></pre>

<p>Okay, now let's edit the <em>KeepitSimple html</em> file:</p>

<p>First change the header div found in the middle of the page - "Welcome. Please register to access your services." (I also surrounded it in <code>&lt;center&gt;</code> tags)</p>

<p>Add the following code to the header, just below the style.css -</p>

<pre><code>{ {response.files.append(URL(request.application,'static','css/bootstrap.min.css'))}}
</code></pre>

<p>Then remove these lines of code-</p>

<pre><code>{ {try:}}{ {=auth.navbar(action=URL('default','user'))}}
{ {=MENU(response.menu,_class='web2py-menu')}}
&lt;div id="footer"&gt;&amp;copy;2007 Keep it Simple &amp;nbsp;
&lt;span class="separator"
|
&lt;/span&gt;
&amp;nbsp; Design by
&lt;a href="http://www.realitysoftware.ca" title="Website Design"&gt;
Reality Software
&lt;/a&gt;
&lt; /div&gt;
</code></pre>

<h2><strong>Update CSS</strong></h2>

<p>Your form should look much cleaner now. It's a bit bare, but you can liven it up with your own HTML. Now, let's add some changes to the CSS.</p>

<p>Again, since web2py uses the Twitter Bootstrap, you can make CSS changes quickly. Navigate to <a href="http://bootswatch.com/">Bootswatch</a>. Here, you can find various CSS themes to play with. In this example, I'm going to use Spacelab.</p>

<p>Now, what you need to do is view the <em>bootstrap.min.css</em> file by clicking download and then selecting the file. It should open in your browser. Copy all the text. Return to your web2py admin. Scroll down to the static files, click the CSS folder, edit the boootstrap.min.css file-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-10_0824.png" alt="" /></p>

<p>-and then delete all the current CSS and paste in the CSS that you copied before from the Spacelab theme. Refresh your form @ <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a> and test it again to make sure nothing broke.</p>

<p>Oh - and if you want, you can edit the layout/appearance of the all_records page as well. I trust that you can figure out how to do that by now. If not - Try anyway, and if you fail, Google to find the answer. You'll learn better that way.</p>

<p>If all looks well, it's time to deploy!</p>

<h2><strong>Deploy</strong></h2>

<p>I'll go over this quick since I covered this in <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">detail</a> in the first tutorial.</p>

<ol>
<li>Go back to the admin page (<a href="http://127.0.0.1:8000/admin/default/site">http://127.0.0.1:8000/admin/default/site</a>) and click Pack All. Save the w2p-package to your computer.</li>
<li>Fire up <a href="https://www.pythonanywhere.com/">PythonAnywhere</a>.</li>
<li>Once logged in, click <em>Web</em>, <em>Replace with a new web app</em>, then click the button for web2py.</li>
<li>Enter an admin password. Click Next.</li>
<li>Next, head on over to the admin interface - https://mjhea9.pythonanywhere.com/admin/default/index (don't forget to use your own user name and add the https:) - which should look familiar (it better!). Enter your password.</li>
<li>On the right side of the page, under the <em>Upload and install packed application section</em>, upload the w2p file you saved. Enter a name for your app ("form"). Click Install.</li>
<li>Check out your form. You can view mine at - <a href="https://mjhea9.pythonanywhere.com/form/default/display_your_form.html">https://mjhea9.pythonanywhere.com/form/default/display_your_form.html</a></li>
</ol>


<p><img src="http://www.backwardsteps.com/uploads/2012-12-10_0917.png" alt="" /></p>

<p>Now just test it out to make sure it all works. Make sure all the errors/validators are working and then add a new record. One thing you do need to change is the default for generic view. You can read more about it <a href="http://web2py.com/books/default/chapter/29/10#Generic-views">here</a>. Open up db.py and scroll down to line 28. You need to remove the if statement, so the line will look just like this:</p>

<pre><code>response.generic_patterns = ['*']
</code></pre>

<p>Now, make sure you can access the <em>grid</em> page - <a href="https://mjhea9.pythonanywhere.com/form/default/all_records">https://mjhea9.pythonanywhere.com/form/default/all_records</a> - and edit, update, and delete some records.</p>

<p>One change that does need to be made is to add the requirement <em>IS_EMAIL()</em> to the email validation field to the db.py file; otherwise, you can submit email addresses that do not follow the conventional format. The final code looks like this:</p>

<pre><code>db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', unique=True, requires=[IS_NOT_EMPTY(), IS_EMAIL()]),
    Field('email_validate',requires=[IS_EMAIL(), IS_EQUAL_TO(request.vars.email)])) 
db.register.email.requires=IS_NOT_IN_DB(db,'register.email')
</code></pre>

<h2><strong>Recap</strong></h2>

<p>And you're done. So - what all did we do?</p>

<ul>
<li><a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">Part 1</a>: You learned how to install web2py on your local computer and deploy a basic app on a cloud platform</li>
<li><a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">Part 2</a>: You learned about Model View Control (MVC) architecture and created a skeleton web form</li>
<li><a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">Part 3</a>: You added data validation to the form</li>
<li><a href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/">Part 4</a>: You learned how to manage records in the database</li>
<li><a href="http://mherman.org/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/">Part 5</a>: You learned how to modify the appearance and layout of the form</li>
</ul>


<p>Congrats!</p>

<p>What's next? Think about what you can do with this info.</p>

<ul>
<li>Keep practicing.</li>
<li>Build something else.</li>
<li>Make some money</li>
<li>And have fun!</li>
</ul>


<p>Thanks for reading. Cheers.</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py, as well as all the files and the final packed app (.w2p) <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%204">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 4 - managing form records)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/"/>
    <updated>2012-12-09T22:32:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records</id>
    <content type="html"><![CDATA[<p>Alright. In this tutorial I'll show you how to modify the controller so that the end user can update and delete records. At this point, I assume:</p>

<ol>
<li>You have web2py already installed => <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">part 1</a></li>
<li>You know what a web form is</li>
<li>You created the skeleton web form => <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">part 2</a></li>
<li>You added data validation (with the help of Han Solo) => <a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">part 3</a></li>
</ol>


<p>Let's begin ...</p>

<p>(1) Launch the server. (2) Go to the admin interface. (3) Edit the "form" application.</p>

<h2><strong>Controller</strong></h2>

<p>Add the following code to <em>default.py</em> just before the SQLFORM function, then add the variable to the function itself:</p>

<pre><code>update = db.register(request.args())
    form = SQLFORM(db.register, update)
</code></pre>

<p>Essentially, <em>request.args()</em> pulls up a user record associated with a specific unique ID.</p>

<h2><strong>Test</strong></h2>

<p>Test this out by adding a new record to the database @ <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>. Make note of the unique id in the <em>Accepted Fields</em> section.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2055.png" alt="" /></p>

<p>Now append that unique id to the end of the base URL - e.g., <a href="http://127.0.0.1:8000/form/default/display_your_form/21">http://127.0.0.1:8000/form/default/display_your_form/21</a> - and the record should appear on a new page, which the user can update.</p>

<hr />

<p>Please note: you can add <em>writable=False</em> or <em>readable=False</em> to the fields in the database to prevent a user from either editing or viewing a particular field. In the example below, I added <em>writable=False</em> to the <em>first_name</em> field.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2111.png" alt="" /></p>

<p>So, now the user can only edit the last name and email fields.</p>

<hr />

<p>Moving on, for this process to work right, the user making the edits must know the unique id beforehand, which is unrealistic. web2py has a solution for that - <em>grid</em>.</p>

<h2><strong>Controller</strong></h2>

<p>The <em>grid</em> method is just wonderful. You have to see it to believe it. Quickly now, add the following function to <em>default.py</em>:</p>

<pre><code>def all_records():
      grid = SQLFORM.grid(db.register,user_signature=False)
      return locals()
</code></pre>

<p>Navigate to the following URL - <a href="http://127.0.0.1:8000/form/default/all_records">http://127.0.0.1:8000/form/default/all_records</a></p>

<p>Wow.</p>

<p>The end user can now perform the CRUD functions as well as search and sort all the records in the database - and it literally took twenty seconds to add this functionality. You can, of course, also require user authentication so only certain users can edit, while other users have read-only access.</p>

<h2><strong>Model</strong></h2>

<p>Finally, let's add two more validators to the form. Go to your database.</p>

<p>I want the user to validate his/her email address and I want it to be unique, so update db.py with the following code:</p>

<pre><code>db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', unique=True, requires=[IS_NOT_EMPTY(), IS_EMAIL()]),
    Field('email_validate',requires=IS_EQUAL_TO(request.vars.email)))
db.register.email.requires=IS_NOT_IN_DB(db,'register.email')
</code></pre>

<p>Take note of lines 5, 6, and 7.</p>

<h2><strong>Test</strong></h2>

<p>Test this by first trying two different email addresses:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2238.png" alt="" /></p>

<p>Then test it again with an email you know is already in the database.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2240.png" alt="" /></p>

<p>Perfect.</p>

<p>Well, we could edit the actual errors that populate, but that's a bit more complicated. They'll suffice for now.</p>

<h2><strong>Recap</strong></h2>

<p>Again, by adding just a few statements we added much functionality to our form, highlighting the power of such web frameworks like web2py. Well. that's it for now. In the next tutorial, I'll show you in brief how to modify the form's appearance via the CSS files. Oh - and we'll finally deploy the finished app!</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%203">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 3 - form validation)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/"/>
    <updated>2012-12-06T21:52:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation</id>
    <content type="html"><![CDATA[<p>Well, in the last <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">tutorial</a> I showed you  how to create a basic web form that stores the submitted data in a SQLite database. In this tutorial, we're going to add in data validation to your form.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed</li>
<li>You know what a web form is</li>
<li>You created the skeleton web form in Part 2</li>
</ol>


<p>Start the web2py server, go to the admin interface, and then edit the "form" application (or whatever you decided to name it).</p>

<h2><strong>Model</strong></h2>

<p>Right now, there is a requirement set in the db.py file for each field-</p>

<pre><code>requires=IS_NOT_EMPTY
</code></pre>

<p>In other words - all fields must be filled out or an error populates.</p>

<h2><strong>View</strong></h2>

<p>What do you want to display to the user?</p>

<p>Open up display_your_form.html and change your code to match the following:</p>

<pre><code>{ {extend 'layout.html'}}
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;h1&gt;Web Form&lt;/h1&gt;
&lt;br /&gt;
&lt;p&gt;Please enter your first and last names, and email address.&lt;br /&gt;
Please note: All attempts must be error free before any info is accepted.&lt;/p&gt;
&lt;h2&gt;Inputs:&lt;/h2&gt;
{ {=form}}
&lt;h2&gt;Submitted Fields:&lt;/h2&gt;
{ {=BEAUTIFY(request.vars)}}
&lt;h2&gt;Accepted Fields:&lt;/h2&gt;
{ {=BEAUTIFY(form.vars)}}
&lt;h2&gt;Errors:&lt;/h2&gt;
{ {=BEAUTIFY(form.errors)}}  
</code></pre>

<p>By adding <em>{ {extend 'layout.html'}}</em>, you will be able to display the flash error messages, which we'll add in next.</p>

<h2><strong>Controller</strong></h2>

<p>Update deafult.py to match the following code-</p>

<pre><code>def display_your_form():
    form = SQLFORM(db.register)
    if form.accepts(request,session):
        response.flash = 'Thanks! The form has been submitted.'
    elif form.errors:
       response.flash = 'Please correct the error(s).'
    else:
       response.flash = 'Try again - no fields can be empty.'
    return dict(form=form)
</code></pre>

<p>This adds an If Statement to display text based on whether the user submits your form with the required fields or not.</p>

<h2><strong>Test</strong></h2>

<ol>
<li>Go to <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>.</li>
<li>Enter your first name, last name, and email.</li>
<li>Your output should look similar to this-</li>
</ol>


<p><img src="http://www.backwardsteps.com/uploads/2012-12-05_0954.png" alt="" /></p>

<p>As long as no fields are blank, you won't see any errors - and the data will be added to the database. Notice how you can now see the unique identifier. The message "Thanks! The form has been submitted." is visible in the top right corner, as well.</p>

<p>How does this work?</p>

<p>Well, when a field is submitted, it's filtered through the <em>accepts</em> method from the Controller, according to the requirements specified in the database schema (<em>IS_NOT_EMPTY)</em>. If the field meets the requirement (accepts returns <em>True)</em>, it's passed to <em>form.vars</em>; if not (accepts returns <em>False)</em>, an error populates, which is then stored in <em>form.errors</em>.</p>

<p>Got it?</p>

<p>See what happens when you enter an error.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-05_1001.png" alt="" /></p>

<p>So when Han forgets his last name and just decides to leave it blank, the field values that meet the requirement are still passed. But they are not added to the database, since there is an error. And you should see an error message in the top right corner. As soon as he remembers, he can go back and correct. Poor Han.</p>

<p>What happens though if he gets confused and enters his first name correctly, but enters his last name in the email field and his email in the last name field? Try it. You should not see an error.</p>

<p>This is a problem. Let's add additional requirements to prevent this from happening.</p>

<h2><strong>Model</strong></h2>

<p>Update the code in db.py to match the following-</p>

<pre><code>db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', requires=[IS_NOT_EMPTY(), IS_EMAIL()]))
</code></pre>

<ul>
<li><em>IS_ALPHANUMERIC()</em> requires that the field can only contain characters ranging from a-z, A-Z, or 0-9</li>
<li><em>IS_EMAIL</em> requires that the field value must look like an email address</li>
</ul>


<p>Now watch happens when you switch the last name and email address.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-05_1007.png" alt="" /></p>

<p>Good. Now he just needs to enter the correct value in the correct fields.</p>

<p>Hey - at least he remembered his last name.</p>

<h2><strong>Recap</strong></h2>

<p>By just tweaking the code a bit, we added basic validation to ensure that no fields are empty and to limit any data integrity issues. Again - Do not deploy the app on PythonAnywhere just yet. We still have more features to add, but we are well underway on having the best form on the Internet.</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%202">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 2 - web forms)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/"/>
    <updated>2012-12-01T21:27:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms</id>
    <content type="html"><![CDATA[<p>In the last <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">tutorial</a> I showed you the basics of web2py, and we even created a web app in less than ten minutes! In Part 2, I'll show you how to create a basic web form that stores the submitted data in a SQLite database.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed</li>
<li>You know what a web form is</li>
</ol>


<p>Anyway - let's get going ...</p>

<h2>MVC Architecture</h2>

<p>Real quick, web2py utilizes the Model View Control (MVC) architecture:</p>

<ul>
<li><em>Model</em> - application data</li>
<li><em>View</em> - portions of the application data that the end user is <em>allowed</em> to see</li>
<li><em>Controller</em> - controls the application workflow and the logic used to display the data to the end user</li>
</ul>


<p>Wikipedia has a great diagram of how each part works together-</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/f/fd/MVC-Process.png" alt="" /></p>

<p>web2py essentially makes it easier for developers to design each part and create the overall workflow to ensure that each part works together. I hope that's clear. If not, please comment, and I'll go a little more in depth. It's important to understand this, as we will be utilizing this form of development from this point on.</p>

<p>Okay - Go ahead and start the web2py server, go to the admin interface, and then create a new application. I named mine "form". Feel free to come up with something a bit more creative.</p>

<h2><strong>Model</strong></h2>

<p>Open db.py in the Model's section and append the following code below, which defines the database schema. There are three required fields, plus a unique ID that is automatically created by web2py.</p>

<pre><code>db = DAL('sqlite://webform.sqlite') 
db.define_table('register', 
    Field('first_name', requires=IS_NOT_EMPTY()),
    Field('last_name', requires=IS_NOT_EMPTY()),
    Field('email', requires=IS_NOT_EMPTY()))
</code></pre>

<h2><strong>View</strong></h2>

<p>Create a new HTML file named default/display_your_form.html</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-30_2319.png" alt="" /></p>

<p>And then add the following code to call the form-</p>

<pre><code>&lt;center&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;h1&gt;Web Form&lt;/h1&gt;
&lt;br /&gt;
&lt;h2&gt;Inputs:&lt;/h2&gt;
{ {=form}}
&lt;h2&gt;Submitted variables:&lt;/h2&gt;
{ {=BEAUTIFY(request.vars)}}
&lt;/center&gt;
</code></pre>

<h2><strong>Controller</strong></h2>

<p>Finally, comment out all the current code in the default.py file and add in this new function to define the form-</p>

<pre><code>def display_your_form():
    form = SQLFORM(db.register)
    return dict(form=form)
</code></pre>

<h2><strong>Test</strong></h2>

<p>Check out your amazing form at <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>. Now, Go ahead and test the form to make sure it works. If done correctly, after you input the data and hit submit, the values are displayed.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-30_2330.png" alt="" /></p>

<h2><strong>Recap</strong></h2>

<p>We used the MVC approach to make this form:</p>

<ul>
<li><em>Model</em>: defines database table and schema</li>
<li><em>View</em>: calls the form</li>
<li><em>Controller</em>: constructs the form to be called</li>
</ul>


<p>Alright - Hold off on deploying the app for now, as we will continue to add features in the next part of this series. Pretty soon we're going to have the best form on the Internet. Give yourself a pat on the back. You went from creating a useless "hello world" app, to creating something functional - all in less than 20 minutes!</p>

<p>You can find the code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%201">here</a>.</p>

<p>In the next tutorial we'll be adding in form validation. Brace yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 1)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/27/crash-course-in-web2py-part-1/"/>
    <updated>2012-11-27T19:53:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/27/crash-course-in-web2py-part-1</id>
    <content type="html"><![CDATA[<p>This tutorial shows how to create a basic web app using the web2py framework. I came across the framework last night and literally created and deployed a web app in less than ten minutes.</p>

<p>Web2py is an open source web application framework that focuses on rapid development. By placing a strong emphasis on ease of use and productivity, it's one of the easiest frameworks to learn and use. Despite its simplicity, though, web2py is jam packed with features and is quite powerful and flexible - much like the Python language itself.</p>

<h2>Download and Run</h2>

<p>Start by downloading the <a href="http://www.web2py.com/examples/default/download">latest</a> stable release.</p>

<p>Unpack the zip, run the web2py executable file, and choose an admin password.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_1642.png" alt="" /></p>

<h2>Create an App</h2>

<p>Click the Administrative Interface link on the right side of the page-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_1659.png" alt="" /></p>

<p>-and enter your password. The admin page shows your installed apps and provides an interface for creating and deploying new apps. On the right side of the page, under the <em>New simple application</em> header, type the name of a new app - in this example I used "helloWorld" - and then click Create.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_1704.png" alt="" /></p>

<p>You will then be redirected to the design interface page. You can also view the generic page for your app at this address - <a href="http://127.0.0.1:8000/helloWorld">http://127.0.0.1:8000/helloWorld</a>.</p>

<h2>Edit the App</h2>

<p>Back on the  page, click the edit button next to "default.py" in the Controllers section.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_2035.png" alt="" /></p>

<p>Then change the default code for the index function to-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_2046.png" alt="" /></p>

<p>Hit CTRL-S on your keyboard to save the changes, then refresh <a href="http://127.0.0.1:8000/helloWorld/default/index">http://127.0.0.1:8000/helloWorld/default/index</a> to see the changes made.</p>

<h2>Deploy the App</h2>

<p>Go back to the admin page (<a href="http://127.0.0.1:8000/admin/default/site">http://127.0.0.1:8000/admin/default/site</a>) and click Pack All. Save the  w2p-package to your computer.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_2317.png" alt="" /></p>

<p>Now you need to deploy the app to a cloud platform. The easiest one to use with web2py is <a href="https://www.pythonanywhere.com/">PythonAnywhere</a>. Go ahead and sign up. Once registered and logged in, click Web, Replace  with a new web app, and then click the button for web2py.</p>

<p>Enter an admin password, and then click Next. Once the app is setup, go to the admin interface at <a href="https://your_user_name.pythonanywhere.com/admin">https://user_name.pythonanywhere.com/admin</a> (replace user_name with your user name) and enter your admin password to log-in. Now, to create your app, go to the <em>Upload and install packed application</em> section on the right side, give your app a name (helloWorld), and finally upload the w2p-file you saved to your computer earlier. Click install.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-26_00141.png" alt="" /></p>

<p>Finally, go to your homepage to view the app at   (replace user_name with your user name).</p>

<p>You just deployed your first app - congrats!</p>

<hr />

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/BXzqmHx6edY "></iframe></div></p>

<br />


<p><em>In the next post, I'll show you how to create a much more advanced web app. Cheers!</em></p>
]]></content>
  </entry>
  
</feed>
