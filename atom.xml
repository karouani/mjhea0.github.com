<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael Herman]]></title>
  <link href="http://mjhea0.github.com/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2012-12-30T10:51:11-08:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django Basics - Installing Django and Setting up a Project and App]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/30/django-basics/"/>
    <updated>2012-12-30T09:48:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/30/django-basics</id>
    <content type="html"><![CDATA[<p>This brief tutorial shows the basics of installing and setting up a simple app in Django that is used to submit and retrieve information about books you&#8217;ve read:</p>

<ul>
<li>Part 1 - Installing and Setting up Django</li>
<li>Part 2 - Creating the Database Model</li>
<li>Part 3 - Django API vs Admin site</li>
<li>Part 4 - Django Templates and Views</li>
</ul>


<p>Each part includes an accompanying video. You can download the source via Github - which includes all four parts. I will be delivering this tutorial from a Windows-perspective, but the Mac OS X perspective is pretty much the same.</p>

<p>This tutorial follows the first few sections of the official Django tutorial.</p>

<p>Videos - <a href="http://www.youtube.com/watch?v=ZgfGdRYVXjw">Part 1</a>, <a href="http://www.youtube.com/watch?v=aHLQpo3UHek">Part 2</a>, <a href="http://www.youtube.com/watch?v=SEV9Adp-AFQ">Part 3</a>, <a href="http://www.youtube.com/watch?v=_cPM7CgG-Fc">Part 4</a></p>

<p>GitHub - <a href="https://github.com/mjhea0/django-tutorial">https://github.com/mjhea0/django-tutorial</a></p>

<p><strong>Django?</strong></p>

<p>Developed in 1995 Django is one of, if not the most, popular Python web frameworks. It promotes rapid development via the model-view-controller architecture. You can learn more about it <a href="https://www.djangoproject.com/">here</a>.</p>

<p><strong>Prerequisites:</strong></p>

<ul>
<li>You have Python 2.7 installed.</li>
<li>You have PIP installed. To install, you need to first install setup tools. Click <a href="http://www.youtube.com/watch?v=ssQAFIQ4oBU">here</a> for a brief tutorial on how to do that. Then you can just run the command <code>easy_install pip</code> from the command prompt to install PIP.</li>
</ul>


<hr />

<p><em>Alright let&#8217;s get started &#8230;</em></p>

<h2><strong>Part 1 - Installing Django</strong></h2>

<ol>
<li><p>Open the command prompt with admin privileges and run the command-</p>

<pre><code> pip install Django
</code></pre>

<p>-to install Django into your site-packages directory.</p></li>
<li><p>To setup, you need to create a new project. Within command prompt, navigate to the directory you wish to create the new project, then run the command -</p>

<pre><code> python C:\Python27\Lib\site-packages\django\bin\django-admin.py startproject testproject
</code></pre>

<p>Your path to <em>django-admin.py</em> may be different, so make sure to tailor it if necessary. Also, <em>testproject</em> is the name of the created project. Feel free to name this whatever you like.</p></li>
<li><p>Next you need to make sure everything was setup correctly. To do that, you can launch the Django server. First, navigate to your newly created directory (<em>testproject</em>, in my case), and then run the command-</p>

<pre><code> python manage.py runserver
</code></pre>

<p>Open up a new browser window and navigate to http://localhost:8000/. If setup correctly, you will see the Welcome to Django screen.</p></li>
<li><p>Let&#8217;s setup the database. Open up <em>settings.py</em> in the <em>testproject</em> directory with a text editor. (I use Notepad++.) Append <em>sqlite3</em> to the end of the Engine key and then add the path to the name key. You can name the database whatever you’d like because if the database doesn’t exist, Django will create it for you in the next step. The results should look like something similar to this (depending upon your path)-</p>

<pre><code> 'ENGINE': 'django.db.backends.sqlite3',     
 'NAME': 'C:/Python27/django/testproject/test.db', 
</code></pre>

<p>(Yes, use forward slashes.)</p></li>
<li><p>Finally, you need to create and then sync the database by navigating to the directory where <em>manage.py</em> is located (should be the project&#8217;s main directory) and then running the following command-</p>

<pre><code> python manage.py syncdb
</code></pre>

<p>Create a superuser. I used <em>admin</em> for both my username and password.</p></li>
</ol>


<p>Alright, the setup is complete. You&#8217;re now ready to start creating an app.</p>

<h2><strong>Part 2 - Creating the Database Model</strong></h2>

<ol>
<li><p>Start by creating an app. Within command prompt, navigate to the <em>testproject</em> directory and then type the command-</p>

<pre><code> python manage.py startapp books
</code></pre>

<p>CD into the directory. You should see a <em>models.py</em> file. This file is used to setup the entities and attributes for your database.</p></li>
<li><p>Go ahead and open <em>models.py</em> in Notepad++ and add in the following code:</p>

<pre><code> class Books(models.Model):
     title = models.CharField(max_length=150)
     author = models.CharField(max_length=100)
     read = models.CharField(max_length=3)
</code></pre>

<p>This code should be relatively clear. This class defines the database fields- title, author, and read. The data in the read field will either be &#8220;yes&#8221; or &#8220;no&#8221; depending on whether you&#8217;ve read the book or not.</p>

<p>Since there is only one table, we don&#8217;t need to establish a foreign key. The primary key, a unique id, will be automatically generated for us by Django&#8217;s magic.</p>

<p>Save the file.</p></li>
<li><p>Now open up the <em>settings.py</em> file, scroll down to <em>Installed Apps</em> and add the app name, <em>books</em>, to the installed apps so that Django knows to include it. Your installed apps section should look like this-</p>

<pre><code> INSTALLED_APPS = (
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.sites',
     'django.contrib.messages',
     'django.contrib.staticfiles',
     'books',
     # Uncomment the next line to enable the admin:
     # 'django.contrib.admin',
     # Uncomment the next line to enable admin documentation:
     # 'django.contrib.admindocs',
 )
</code></pre>

<p>Save the file.</p></li>
<li><p>CD back to the main project directory and run the command-</p>

<pre><code> python manage.py sql books
</code></pre>

<p>-to display the actual SQL statements for creating the table. Did you notice the primary key?</p>

<p>Your output should look like this-</p>

<pre><code> BEGIN;
 CREATE TABLE "books_books" (
     "id" integer NOT NULL PRIMARY KEY,
     "title" varchar(150) NOT NULL,
     "author" varchar(100) NOT NULL,
     "read" varchar(3) NOT NULL
 )
 ;
 COMMIT;
</code></pre>

<p>You can also use the following command to check to see if there are any errors in your models-</p>

<pre><code> python manage.py validate
</code></pre></li>
<li><p>Finally, you need to run the following command to execute the SQL statements:</p>

<pre><code> python manage.py syncdb
</code></pre></li>
</ol>


<p>Next, I&#8217;ll show you how to access the Django API to add data to the database.</p>

<h2><strong>Part 3 - Django API vs Admin site</strong></h2>

<ol>
<li><p>First open up command prompt, navigate to your project directory, and then run the command-</p>

<pre><code> python manage.py shell
</code></pre>

<p>This opens an interactive environment for us to use.</p></li>
<li><p>Next go ahead and import your app with the following command-</p>

<pre><code> from books.models import Books
</code></pre></li>
<li><p>There&#8217;s a number of different things you can do within this environment, but let&#8217;s stick with adding data to our database. To add a row, run this command-</p>

<pre><code> b = Books(title="To Kill a Mockingbird", author="Harper Lee", read="yes")
 b.save()
 b = Books(title="Brave New World", author="Aldous Huxley", read="yes")
 b.save()
 b = Books(title="War and Peace", author="Leo Tolstoy", read="no")
 b.save()
</code></pre>

<p>Go ahead and add as many books as you&#8217;d like for practice.</p>

<p> Once complete, you can view the data in your database in a number of ways. I like to just use SQLite, which can be downloaded <a href="http://sourceforge.net/projects/sqlitebrowser/">here</a>. So, go ahead and open the text.db file which is located within your project&#8217;s main directory, switch to the <em>Browse Data</em> tab, and then under the Table dropdown choose <em>books_books</em>. You should see all the books you added.</p>

<p> You can exit the Django interactive environment using the <code>exit()</code> command.</p></li>
</ol>


<p>Okay, let&#8217;s look at an even easier means of adding data using <strong>Django&#8217;s admin site</strong>.</p>

<ol>
<li>Open the <em>settings.py</em> file, scroll down to <em>Installed Apps</em> and uncomment the line <em>&#8216;django.contrib.admin&#8217;,</em>. Then save the file.</li>
<li><p>Update the database by running the command-</p>

<pre><code> python manage.py syncdb
</code></pre></li>
<li><p>Next open the <em>urls.py</em> file within the <em>books</em> directory. You need to uncomment these three lines-</p>

<pre><code> from django.contrib import admin
 admin.autodiscover()
 url(r'^admin/', include(admin.site.urls)),
</code></pre>

<p>Save the file and exit.</p></li>
<li><p>Now create a new file in your <em>books</em> directory called <em>admin.py</em> and add the following code to the file-</p>

<pre><code> from books.models import Books
 from django.contrib import admin
 admin.site.register(Books)
</code></pre></li>
<li><p>Next, open up your <em>models.py</em> file and add these two lines of code-</p>

<pre><code>     def __unicode__(self):
         return self.title + " / " + self.author + " / " + self.read
</code></pre>

<p>Essentially, <em>self</em> refers to the current object.</p></li>
<li><p>Now start the development server - <code>python manage.py runserver</code>, point your browser to http://localhost:8000/admin, and enter your login credentials. You should see the <em>Books</em> app. And if you click the app, you should now see the data we added earlier.</p>

<p>Go ahead and add a few more books in. Try deleting a row as well. See how much easier that is in the Admin console?</p></li>
</ol>


<p>So we&#8217;re done with the Admin console. Hit CTRL+BREAK to exit. I&#8217;m also done showing you how to create and modify your app&#8217;s model(s). Next, we&#8217;ll look at how to modify what the user sees (views and templates).</p>

<h2><strong>Part 4 - Django Templates and Views</strong></h2>

<p>Again, in this final tutorial I&#8217;ll go over how to create the public interface.</p>

<ol>
<li><p>The first thing we need to do is setup the URL structure. Open up <em>urls.py</em> and then add this code to the <em>urlpatterns</em>-</p>

<pre><code> url(r'^books/$', 'books.views.index'),
</code></pre>

<p>This is essentially a tuple that points a user to a Django page based on the URL that user visits. In this case the regular expression dictates that when the user visits any page with the ending /books they will be see the books.views.index page. This is a bit complicated, so be sure to visit the Django <a href="https://docs.djangoproject.com/en/1.4/intro/tutorial03/">tutorial</a> for more into.</p></li>
<li><p>Now to ensure that this is setup correctly run the server and then point your browser to http://localhost:8000/books.</p>

<p>As long as you get the error, <em>ViewDoesNotExist at /books</em>, then the url is setup correctly.</p>

<p>We need to actually write the view now.</p></li>
<li><p>Stop the server (CRTL+BREAK) and then within the <em>books</em> directory open <em>views.py</em> in Notepad++ and write the following code to test out your views-</p>

<pre><code> from django.http import HttpResponse
 def index(request):
     return HttpResponse("Hello. This is a test.")
</code></pre>

<p>Save the file. Run the server. And refresh the page. You should no longer see an error. Instead, you should just see a page with the words <em>Hello. This is a test.</em> in the top corner.</p></li>
<li><p>Okay, now let&#8217;s display something a bit more meaningful - like a listing of all the books in the database. To do that, you need your <em>views.py</em> file to look like this-</p>

<pre><code> from django.http import HttpResponse
 from books.models import Books
 def index(request):
     books_list = Books.objects.all()
     return HttpResponse(books_list)
</code></pre>

<p>-and then just hit refresh on your browser. (Remember: we didn&#8217;t stop the server).</p>

<p> You should see all of the books in one long line. It looks bad, but it works.</p></li>
</ol>


<p>Next, we&#8217;re going to work with <strong>templates</strong>, which will allow us to easily create a much more readable output.</p>

<ol>
<li>Start by making a new directory in the django directory, outside of the project, called <em>templates</em>. Within that directory, make a directory called <em>books</em>.</li>
<li><p>Next open up <em>settings.py</em>, scroll down to <em>TEMPLATE_DIRS</em> and add the template directory-</p>

<pre><code> "C:/Python27/django/templates"
</code></pre>

<p>Yes, those are forward slashes.</p></li>
<li><p>Now create a new file in your <em>temples\books</em> directory. Save it as index.html and add the following code-</p>

<pre><code> &lt;h1&gt;My Fab Book Collection&lt;/h1&gt;
 { % if books_list %}
 &lt;ul&gt;
 { % for b in books_list %}
     &lt;li&gt; |  | &lt;/li&gt;
 { % endfor %}
 &lt;/ul&gt; 
 { % endif %}
</code></pre></li>
<li><p>Open <em>views.py</em> again and make it looks like this-</p>

<pre><code> from django.http import HttpResponse
 from books.models import Books
 from django.template import Context, loader     
 def index(request):
     books_list = Books.objects.all()
     t = loader.get_template('books/index.html')
     c = Context({'books_list': books_list,})
     return HttpResponse(t.render(c))
</code></pre>

<p>Basically, the loader is the path to the template we created, which then gets assigned to the Python object via the Context dictionary.</p></li>
<li>Save the file. Run the server. Refresh the http://localhost:8000/books page. There&#8217;s the books. Looks a little better, too.</li>
</ol>


<p>I know I said that I&#8217;d show to make it so a non-administrator can add data to the database - but I just realized that this would be another lesson in itself. So, I&#8217;m going to stop here. Feel free to view the Django Tutorial to learn how to add that functionality to your application.</p>

<p>In fact, the whole point to these tutorials is for you to get started with the Django tutorial. I bounced around a bit but I hope that you can now go through the tutorial a bit easier now that you have a starting off point.</p>

<p>Thanks for watching. See you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Excel Tips: How to Cut Down on Calculations Using SUMIF and SUMIFS]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/12/excel-tips-how-to-cut-down-on-calculations-using-sumif-and-sumifs/"/>
    <updated>2012-12-12T20:23:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/12/excel-tips-how-to-cut-down-on-calculations-using-sumif-and-sumifs</id>
    <content type="html"><![CDATA[<p>The SUMIF and SUMIFS function in Microsoft Excel is a simple, yet powerful calculation tool. This tutorial will show you how this function works, as well as provide examples of how to use it. Most of you are aware that the SUM function calculates the total of a cell range. SUMIF takes this calculation step a bit further. It says, &#8220;Only <strong>SUM</strong> the numbers <em>in this range</em> <strong>IF</strong> a cell <em>in this range</em> contains a specific value.&#8221;</p>

<h2><strong>SUMIF Arguments: Range, Criteria, and Sum Range</strong></h2>

<p> <em>Proper syntax:</em> =SUMIF(range, criteria, sum_range) Range and criteria are essential parts of any SUMIF equation; while the sum range is optional. What does each part do, in English?</p>

<ul>
<li><em>Range</em> - The range of cells you want Excel to search. This could be a block of cells, in which case you would use the top left corner and bottom right corner of your range (A1:C3, for example, gives a three by three area of cells).</li>
<li><em>Criteria</em> - Defines the flag Excel is to use to determine which cells to add. Using our spreadsheet example below, the criteria could be &#8220;Non Edible&#8221;, &#8220;October&#8221; or &#8220;Car&#8221;, to name a few. In many cases, it&#8217;s just a number. It could be greater than, less than, or equal to, as well.</li>
<li><em>Sum Range</em> - Optional. Defines the cells to sum. This range holds the actual numbers. If it&#8217;s left out of the equation, the function sums the range. As with range, this could be a block of cells, column or rows.</li>
</ul>


<h2><strong>Using the SUMIF Function</strong></h2>

<p> For this tutorial, we&#8217;re going to use a simple table to track household expenditures for two months. To set up your table and criteria, you first have to define the overall goals. In this example, our goals are:</p>

<ul>
<li>determine monthly household costs</li>
<li>provide a breakdown of overall costs</li>
<li>automaticly update of calculations Let&#8217;s get started!</li>
</ul>


<p><strong>(1) Spreadsheet Setup</strong></p>

<p>Create a table called COST TABLE with the following headings: Month, Type, Sub-type, and Cost. Fill them in, as shown in the screenshot below:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_0935.png" alt="2012-12-12_0935" /></p>

<p>Create a table called CALCULATIONS, and add the following headings in the first column: October, Food, Non Edible, November, Food, Non Edible, and Total  - following the format below:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_0949.png" alt="2012-12-12_0949" /></p>

<p><strong>(2) Write the SUMIF Function in the CALCULATIONS table</strong></p>

<p>The SUMIF function in C4 (column C is the Totals column) totals the Cost column depending on the Type of the entry. Cell C4 says: SUMIF(the Month column, equals October, add the Cost column) - <em>=SUMIF(F4:F13,&#8221;October&#8221;,I4:I13)</em></p>

<p>Meanwhile, the formula for cell C5 - <em>=SUMIF(G4:G8,&#8221;food&#8221;,I4:I8)</em></p>

<p>Notice how the range only goes from G4:G8, as I only want to total food for October. If wanted to total food for November as well, I&#8217;d use the range G4:G13. Now, if the Month column was not sorted, then I&#8217;d need to use the SUMIFS function and specify to criteria - e.g., <em>=SUMIFS(I4:I13,F4:F13,&#8221;October&#8221;,G4:G13,&#8221;Food&#8221;)</em></p>

<p>This produces the exact same results - $4.24. The syntax is slightly different in that you specify the sum_range first, and it is mandatory. _ Proper syntax:_ =SUMIFS(sum_range, criteria_range1, criteria1, criteria_range2, criteria2, criteria_range3, criteria3 &#8230;)
 <img src="http://www.backwardsteps.com/uploads/2012-12-12_1013.png" alt="2012-12-12_1013" /></p>

<p><strong>(3) </strong> <strong>Automatic Updates</strong></p>

<p>In order for the calculation table to update when a number is changed or when a new row is added, you need to change the COST TABLE from a range to an actual table. To do that in Excel, click anywhere in the table and press Crtil+T on your keyboard. Make sure you do not include the COST TABLE label in your range selection:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_1022.png" alt="2012-12-12_1022" /></p>

<p>Now, you&#8217;ll need to rewrite your functions. For example, cell C4 will now be - <em>=SUMIF(Table1[Month],&#8221;October&#8221;,Table1[Cost])</em></p>

<p>See the difference? Instead of the range, there is the table name and header. Update all of the functions to match this syntax:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_1035.png" alt="2012-12-12_1035" /></p>

<p>Now when you make any changes the CALCULATIONS table will update automatically (compare the two Totals columns to see the changes). Click <a href="http://www.backwardsteps.com/uploads/sumif-sumifs.mp4">here</a> to watch the video.</p>

<p><strong>(4) More Examples</strong></p>

<p>SUMIF can use criteria such as <em>greater than</em> or <em>less than</em>. For example, if you only want to total costs larger than $4, you can write:</p>

<p><strong>Example 1:</strong> =SUMIF(I3:I12,&#8221;&gt;4&#8221;,I3:I12)</p>

<p>SUMIF functions can be written without the sum range if it&#8217;s the same as the range. In the example below, we&#8217;re telling Excel, &#8220;Sum any values greater than 4 in the Cost column.&#8221;</p>

<p><strong>Example 2:</strong> =SUMIF(I3:I12,&#8221;&gt;4&#8221;)</p>

<p>If the criteria is a number or cell reference, the function can be written without quotes. If the criteria is an expression or text, frame it in quotes.</p>

<p><strong>Example 3:</strong> without quotes, if the range equals the value in cell I3: =SUMIF(I3:I12, I3)</p>

<p>Combine SUMIF with other functions for higher calculations, such as summing and then dividing, by placing the entire function in parenthesis:</p>

<p><strong>Example 4:</strong> =SUM ( (SUMIF (I3:I12,&#8221;&gt;4&#8221;) ) /3 )</p>

<p><em>Tip: Remember that Excel calculates using the standard order of operations.</em></p>

<h2><strong>The Benefits of SUMIF</strong></h2>

<p> SUMIF has many benefits, but a big bonus is the ability to limit the number of spreadsheets. By adding defining columns rather than using spreadsheets (a Month column instead of splitting October costs and November costs into separate sheets, for example), you keep all the data on a single sheet. In turn, it becomes easier to sort, compare, and modify groupings. Now, when you add to your Cost Table, your calculations will automatically update. All you have to do is type your entries. Try it yourself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 5 - modifying the appearance and deploying the web form)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/"/>
    <updated>2012-12-10T07:39:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form</id>
    <content type="html"><![CDATA[<p>You made it. In this final tutorial I&#8217;ll show you how to easily modify the form&#8217;s appearance, and we&#8217;ll deploy the app to PythonAnywhere.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed => <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">part 1</a></li>
<li>You know what a web form is</li>
<li>You created the skeleton web form => <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">part 2</a></li>
<li>You added data validation (with the help of Han Solo) => <a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">part 3</a></li>
<li>You learned how to easily add CRUD functions to manage records => <a href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/">part 4</a></li>
</ol>


<p>Let&#8217;s get going &#8230;</p>

<p>Launch the server. -> Go to the admin interface. -> Edit the &#8220;form&#8221; application.</p>

<p>So, by default web2py utilizes the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> front-end framework, which makes updating the layout and appearance easy.</p>

<h2><strong>Download New Layout Plugin</strong></h2>

<p>First, go to the web2py layout plugin <a href="http://web2py.com/layouts">page</a> to find a layout that you like. In this example, I used <a href="http://web2py.com/layouts/static/plugin_layouts/layouts/KeepitSimple/index.html">KeepitSimple</a>. Once you find one, go ahead and download the .w2p file.</p>

<p>Back on the admin page for the form, scroll to the bottom of the page, and upload the .w2p file beneath the Plugins section. Now, click the link for plugin_layouts and copy the name of the new file including the full path- <em>plugin_layouts/layouts/KeepitSimple.html</em>. Now, edit the display_your_form.html file and paste the new .html file in the very first line of the code, replacing layout.html-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-09_2303.png" alt="" /></p>

<p>Next, I&#8217;m going to remove the <em>Web Form</em> title between the h1 tags, remove the line breaks, and clean up the instructions. I&#8217;m also going to remove the <em>Submitted</em>, <em>Accepted</em>, and, <em>Errors</em>  sections, as the user does not need to see all that information. So the final code looks like this:</p>

<pre><code>{ {extend 'plugin_layouts/layouts/KeepitSimple.html'}}
&lt;p&gt;Please enter your first name, last name, and email address - thanks!&lt;/p&gt;
&lt;h2&gt;Inputs:&lt;/h2&gt;
{ {=form}}
</code></pre>

<p>Okay, now let&#8217;s edit the <em>KeepitSimple html</em> file:</p>

<p>First change the header div found in the middle of the page - &#8220;Welcome. Please register to access your services.&#8221; (I also surrounded it in <code>&lt;center&gt;</code> tags)</p>

<p>Add the following code to the header, just below the style.css -</p>

<pre><code>{ {response.files.append(URL(request.application,'static','css/bootstrap.min.css'))}}
</code></pre>

<p>Then remove these lines of code-</p>

<pre><code>{ {try:}}{ {=auth.navbar(action=URL('default','user'))}}
{ {=MENU(response.menu,_class='web2py-menu')}}
&lt;div id="footer"&gt;&amp;copy;2007 Keep it Simple &amp;nbsp;
&lt;span class="separator"
|
&lt;/span&gt;
&amp;nbsp; Design by
&lt;a href="http://www.realitysoftware.ca" title="Website Design"&gt;
Reality Software
&lt;/a&gt;
&lt; /div&gt;
</code></pre>

<h2><strong>Update CSS</strong></h2>

<p>Your form should look much cleaner now. It&#8217;s a bit bare, but you can liven it up with your own HTML. Now, let&#8217;s add some changes to the CSS.</p>

<p>Again, since web2py uses the Twitter Bootstrap, you can make CSS changes quickly. Navigate to <a href="http://bootswatch.com/">Bootswatch</a>. Here, you can find various CSS themes to play with. In this example, I&#8217;m going to use Spacelab.</p>

<p>Now, what you need to do is view the <em>bootstrap.min.css</em> file by clicking download and then selecting the file. It should open in your browser. Copy all the text. Return to your web2py admin. Scroll down to the static files, click the CSS folder, edit the boootstrap.min.css file-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-10_0824.png" alt="" /></p>

<p>-and then delete all the current CSS and paste in the CSS that you copied before from the Spacelab theme. Refresh your form @ <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a> and test it again to make sure nothing broke.</p>

<p>Oh - and if you want, you can edit the layout/appearance of the all_records page as well. I trust that you can figure out how to do that by now. If not - Try anyway, and if you fail, Google to find the answer. You&#8217;ll learn better that way.</p>

<p>If all looks well, it&#8217;s time to deploy!</p>

<h2><strong>Deploy</strong></h2>

<p>I&#8217;ll go over this quick since I covered this in <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">detail</a> in the first tutorial.</p>

<ol>
<li>Go back to the admin page (<a href="http://127.0.0.1:8000/admin/default/site">http://127.0.0.1:8000/admin/default/site</a>) and click Pack All. Save the w2p-package to your computer.</li>
<li>Fire up <a href="https://www.pythonanywhere.com/">PythonAnywhere</a>.</li>
<li>Once logged in, click <em>Web</em>, <em>Replace with a new web app</em>, then click the button for web2py.</li>
<li>Enter an admin password. Click Next.</li>
<li>Next, head on over to the admin interface - https://mjhea9.pythonanywhere.com/admin/default/index (don&#8217;t forget to use your own user name and add the https:) - which should look familiar (it better!). Enter your password.</li>
<li>On the right side of the page, under the <em>Upload and install packed application section</em>, upload the w2p file you saved. Enter a name for your app (&#8220;form&#8221;). Click Install.</li>
<li>Check out your form. You can view mine at - <a href="https://mjhea9.pythonanywhere.com/form/default/display_your_form.html">https://mjhea9.pythonanywhere.com/form/default/display_your_form.html</a></li>
</ol>


<p><img src="http://www.backwardsteps.com/uploads/2012-12-10_0917.png" alt="" /></p>

<p>Now just test it out to make sure it all works. Make sure all the errors/validators are working and then add a new record. One thing you do need to change is the default for generic view. You can read more about it <a href="http://web2py.com/books/default/chapter/29/10#Generic-views">here</a>. Open up db.py and scroll down to line 28. You need to remove the if statement, so the line will look just like this:</p>

<pre><code>response.generic_patterns = ['*']
</code></pre>

<p>Now, make sure you can access the <em>grid</em> page - <a href="https://mjhea9.pythonanywhere.com/form/default/all_records">https://mjhea9.pythonanywhere.com/form/default/all_records</a> - and edit, update, and delete some records.</p>

<p>One change that does need to be made is to add the requirement <em>IS_EMAIL()</em> to the email validation field to the db.py file; otherwise, you can submit email addresses that do not follow the conventional format. The final code looks like this:</p>

<pre><code>db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', unique=True, requires=[IS_NOT_EMPTY(), IS_EMAIL()]),
    Field('email_validate',requires=[IS_EMAIL(), IS_EQUAL_TO(request.vars.email)])) 
db.register.email.requires=IS_NOT_IN_DB(db,'register.email')
</code></pre>

<h2><strong>Recap</strong></h2>

<p>And you&#8217;re done. So - what all did we do?</p>

<ul>
<li><a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">Part 1</a>: You learned how to install web2py on your local computer and deploy a basic app on a cloud platform</li>
<li><a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">Part 2</a>: You learned about Model View Control (MVC) architecture and created a skeleton web form</li>
<li><a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">Part 3</a>: You added data validation to the form</li>
<li><a href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/">Part 4</a>: You learned how to manage records in the database</li>
<li><a href="http://mherman.org/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/">Part 5</a>: You learned how to modify the appearance and layout of the form</li>
</ul>


<p>Congrats!</p>

<p>What&#8217;s next? Think about what you can do with this info.</p>

<ul>
<li>Keep practicing.</li>
<li>Build something else.</li>
<li>Make some money</li>
<li>And have fun!</li>
</ul>


<p>Thanks for reading. Cheers.</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py, as well as all the files and the final packed app (.w2p) <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%204">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 4 - managing form records)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/"/>
    <updated>2012-12-09T22:32:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records</id>
    <content type="html"><![CDATA[<p>Alright. In this tutorial I&#8217;ll show you how to modify the controller so that the end user can update and delete records. At this point, I assume:</p>

<ol>
<li>You have web2py already installed => <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">part 1</a></li>
<li>You know what a web form is</li>
<li>You created the skeleton web form => <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">part 2</a></li>
<li>You added data validation (with the help of Han Solo) => <a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">part 3</a></li>
</ol>


<p>Let&#8217;s begin &#8230;</p>

<p>(1) Launch the server. (2) Go to the admin interface. (3) Edit the &#8220;form&#8221; application.</p>

<h2><strong>Controller</strong></h2>

<p>Add the following code to <em>default.py</em> just before the SQLFORM function, then add the variable to the function itself:</p>

<pre><code>update = db.register(request.args())
    form = SQLFORM(db.register, update)
</code></pre>

<p>Essentially, <em>request.args()</em> pulls up a user record associated with a specific unique ID.</p>

<h2><strong>Test</strong></h2>

<p>Test this out by adding a new record to the database @ <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>. Make note of the unique id in the <em>Accepted Fields</em> section.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2055.png" alt="" /></p>

<p>Now append that unique id to the end of the base URL - e.g., <a href="http://127.0.0.1:8000/form/default/display_your_form/21">http://127.0.0.1:8000/form/default/display_your_form/21</a> - and the record should appear on a new page, which the user can update.</p>

<hr />

<p>Please note: you can add <em>writable=False</em> or <em>readable=False</em> to the fields in the database to prevent a user from either editing or viewing a particular field. In the example below, I added <em>writable=False</em> to the <em>first_name</em> field.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2111.png" alt="" /></p>

<p>So, now the user can only edit the last name and email fields.</p>

<hr />

<p>Moving on, for this process to work right, the user making the edits must know the unique id beforehand, which is unrealistic. web2py has a solution for that - <em>grid</em>.</p>

<h2><strong>Controller</strong></h2>

<p>The <em>grid</em> method is just wonderful. You have to see it to believe it. Quickly now, add the following function to <em>default.py</em>:</p>

<pre><code>def all_records():
      grid = SQLFORM.grid(db.register,user_signature=False)
      return locals()
</code></pre>

<p>Navigate to the following URL - <a href="http://127.0.0.1:8000/form/default/all_records">http://127.0.0.1:8000/form/default/all_records</a></p>

<p>Wow.</p>

<p>The end user can now perform the CRUD functions as well as search and sort all the records in the database - and it literally took twenty seconds to add this functionality. You can, of course, also require user authentication so only certain users can edit, while other users have read-only access.</p>

<h2><strong>Model</strong></h2>

<p>Finally, let&#8217;s add two more validators to the form. Go to your database.</p>

<p>I want the user to validate his/her email address and I want it to be unique, so update db.py with the following code:</p>

<pre><code>db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', unique=True, requires=[IS_NOT_EMPTY(), IS_EMAIL()]),
    Field('email_validate',requires=IS_EQUAL_TO(request.vars.email)))
db.register.email.requires=IS_NOT_IN_DB(db,'register.email')
</code></pre>

<p>Take note of lines 5, 6, and 7.</p>

<h2><strong>Test</strong></h2>

<p>Test this by first trying two different email addresses:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2238.png" alt="" /></p>

<p>Then test it again with an email you know is already in the database.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2240.png" alt="" /></p>

<p>Perfect.</p>

<p>Well, we could edit the actual errors that populate, but that&#8217;s a bit more complicated. They&#8217;ll suffice for now.</p>

<h2><strong>Recap</strong></h2>

<p>Again, by adding just a few statements we added much functionality to our form, highlighting the power of such web frameworks like web2py. Well. that&#8217;s it for now. In the next tutorial, I&#8217;ll show you in brief how to modify the form&#8217;s appearance via the CSS files. Oh - and we&#8217;ll finally deploy the finished app!</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%203">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 3 - form validation)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/"/>
    <updated>2012-12-06T21:52:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation</id>
    <content type="html"><![CDATA[<p>Well, in the last <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">tutorial</a> I showed you  how to create a basic web form that stores the submitted data in a SQLite database. In this tutorial, we&#8217;re going to add in data validation to your form.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed</li>
<li>You know what a web form is</li>
<li>You created the skeleton web form in Part 2</li>
</ol>


<p>Start the web2py server, go to the admin interface, and then edit the &#8220;form&#8221; application (or whatever you decided to name it).</p>

<h2><strong>Model</strong></h2>

<p>Right now, there is a requirement set in the db.py file for each field-</p>

<pre><code>requires=IS_NOT_EMPTY
</code></pre>

<p>In other words - all fields must be filled out or an error populates.</p>

<h2><strong>View</strong></h2>

<p>What do you want to display to the user?</p>

<p>Open up display_your_form.html and change your code to match the following:</p>

<pre><code>{ {extend 'layout.html'}}
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;h1&gt;Web Form&lt;/h1&gt;
&lt;br /&gt;
&lt;p&gt;Please enter your first and last names, and email address.&lt;br /&gt;
Please note: All attempts must be error free before any info is accepted.&lt;/p&gt;
&lt;h2&gt;Inputs:&lt;/h2&gt;
{ {=form}}
&lt;h2&gt;Submitted Fields:&lt;/h2&gt;
{ {=BEAUTIFY(request.vars)}}
&lt;h2&gt;Accepted Fields:&lt;/h2&gt;
{ {=BEAUTIFY(form.vars)}}
&lt;h2&gt;Errors:&lt;/h2&gt;
{ {=BEAUTIFY(form.errors)}}  
</code></pre>

<p>By adding <em>{ {extend &#8216;layout.html&#8217;}}</em>, you will be able to display the flash error messages, which we&#8217;ll add in next.</p>

<h2><strong>Controller</strong></h2>

<p>Update deafult.py to match the following code-</p>

<pre><code>def display_your_form():
    form = SQLFORM(db.register)
    if form.accepts(request,session):
        response.flash = 'Thanks! The form has been submitted.'
    elif form.errors:
       response.flash = 'Please correct the error(s).'
    else:
       response.flash = 'Try again - no fields can be empty.'
    return dict(form=form)
</code></pre>

<p>This adds an If Statement to display text based on whether the user submits your form with the required fields or not.</p>

<h2><strong>Test</strong></h2>

<ol>
<li>Go to <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>.</li>
<li>Enter your first name, last name, and email.</li>
<li>Your output should look similar to this-</li>
</ol>


<p><img src="http://www.backwardsteps.com/uploads/2012-12-05_0954.png" alt="" /></p>

<p>As long as no fields are blank, you won&#8217;t see any errors - and the data will be added to the database. Notice how you can now see the unique identifier. The message &#8220;Thanks! The form has been submitted.&#8221; is visible in the top right corner, as well.</p>

<p>How does this work?</p>

<p>Well, when a field is submitted, it&#8217;s filtered through the <em>accepts</em> method from the Controller, according to the requirements specified in the database schema (<em>IS_NOT_EMPTY)</em>. If the field meets the requirement (accepts returns <em>True)</em>, it&#8217;s passed to <em>form.vars</em>; if not (accepts returns <em>False)</em>, an error populates, which is then stored in <em>form.errors</em>.</p>

<p>Got it?</p>

<p>See what happens when you enter an error.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-05_1001.png" alt="" /></p>

<p>So when Han forgets his last name and just decides to leave it blank, the field values that meet the requirement are still passed. But they are not added to the database, since there is an error. And you should see an error message in the top right corner. As soon as he remembers, he can go back and correct. Poor Han.</p>

<p>What happens though if he gets confused and enters his first name correctly, but enters his last name in the email field and his email in the last name field? Try it. You should not see an error.</p>

<p>This is a problem. Let&#8217;s add additional requirements to prevent this from happening.</p>

<h2><strong>Model</strong></h2>

<p>Update the code in db.py to match the following-</p>

<pre><code>db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', requires=[IS_NOT_EMPTY(), IS_EMAIL()]))
</code></pre>

<ul>
<li><em>IS_ALPHANUMERIC()</em> requires that the field can only contain characters ranging from a-z, A-Z, or 0-9</li>
<li><em>IS_EMAIL</em> requires that the field value must look like an email address</li>
</ul>


<p>Now watch happens when you switch the last name and email address.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-05_1007.png" alt="" /></p>

<p>Good. Now he just needs to enter the correct value in the correct fields.</p>

<p>Hey - at least he remembered his last name.</p>

<h2><strong>Recap</strong></h2>

<p>By just tweaking the code a bit, we added basic validation to ensure that no fields are empty and to limit any data integrity issues. Again - Do not deploy the app on PythonAnywhere just yet. We still have more features to add, but we are well underway on having the best form on the Internet.</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%202">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 2 - web forms)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/"/>
    <updated>2012-12-01T21:27:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms</id>
    <content type="html"><![CDATA[<p>In the last <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">tutorial</a> I showed you the basics of web2py, and we even created a web app in less than ten minutes! In Part 2, I&#8217;ll show you how to create a basic web form that stores the submitted data in a SQLite database.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed</li>
<li>You know what a web form is</li>
</ol>


<p>Anyway - let&#8217;s get going &#8230;</p>

<h2>MVC Architecture</h2>

<p>Real quick, web2py utilizes the Model View Control (MVC) architecture:</p>

<ul>
<li><em>Model</em> - application data</li>
<li><em>View</em> - portions of the application data that the end user is <em>allowed</em> to see</li>
<li><em>Controller</em> - controls the application workflow and the logic used to display the data to the end user</li>
</ul>


<p>Wikipedia has a great diagram of how each part works together-</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/f/fd/MVC-Process.png" alt="" /></p>

<p>web2py essentially makes it easier for developers to design each part and create the overall workflow to ensure that each part works together. I hope that&#8217;s clear. If not, please comment, and I&#8217;ll go a little more in depth. It&#8217;s important to understand this, as we will be utilizing this form of development from this point on.</p>

<p>Okay - Go ahead and start the web2py server, go to the admin interface, and then create a new application. I named mine &#8220;form&#8221;. Feel free to come up with something a bit more creative.</p>

<h2><strong>Model</strong></h2>

<p>Open db.py in the Model&#8217;s section and append the following code below, which defines the database schema. There are three required fields, plus a unique ID that is automatically created by web2py.</p>

<pre><code>db = DAL('sqlite://webform.sqlite') 
db.define_table('register', 
    Field('first_name', requires=IS_NOT_EMPTY()),
    Field('last_name', requires=IS_NOT_EMPTY()),
    Field('email', requires=IS_NOT_EMPTY()))
</code></pre>

<h2><strong>View</strong></h2>

<p>Create a new HTML file named default/display_your_form.html</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-30_2319.png" alt="" /></p>

<p>And then add the following code to call the form-</p>

<pre><code>&lt;center&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;h1&gt;Web Form&lt;/h1&gt;
&lt;br /&gt;
&lt;h2&gt;Inputs:&lt;/h2&gt;
{ {=form}}
&lt;h2&gt;Submitted variables:&lt;/h2&gt;
{ {=BEAUTIFY(request.vars)}}
&lt;/center&gt;
</code></pre>

<h2><strong>Controller</strong></h2>

<p>Finally, comment out all the current code in the default.py file and add in this new function to define the form-</p>

<pre><code>def display_your_form():
    form = SQLFORM(db.register)
    return dict(form=form)
</code></pre>

<h2><strong>Test</strong></h2>

<p>Check out your amazing form at <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>. Now, Go ahead and test the form to make sure it works. If done correctly, after you input the data and hit submit, the values are displayed.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-30_2330.png" alt="" /></p>

<h2><strong>Recap</strong></h2>

<p>We used the MVC approach to make this form:</p>

<ul>
<li><em>Model</em>: defines database table and schema</li>
<li><em>View</em>: calls the form</li>
<li><em>Controller</em>: constructs the form to be called</li>
</ul>


<p>Alright - Hold off on deploying the app for now, as we will continue to add features in the next part of this series. Pretty soon we&#8217;re going to have the best form on the Internet. Give yourself a pat on the back. You went from creating a useless &#8220;hello world&#8221; app, to creating something functional - all in less than 20 minutes!</p>

<p>You can find the code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%201">here</a>.</p>

<p>In the next tutorial we&#8217;ll be adding in form validation. Brace yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in web2py (part 1)]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/27/crash-course-in-web2py-part-1/"/>
    <updated>2012-11-27T19:53:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/27/crash-course-in-web2py-part-1</id>
    <content type="html"><![CDATA[<p>This tutorial shows how to create a basic web app using the web2py framework. I came across the framework last night and literally created and deployed a web app in less than ten minutes.</p>

<p>Web2py is an open source web application framework that focuses on rapid development. By placing a strong emphasis on ease of use and productivity, it&#8217;s one of the easiest frameworks to learn and use. Despite its simplicity, though, web2py is jam packed with features and is quite powerful and flexible - much like the Python language itself.</p>

<h2>Download and Run</h2>

<p>Start by downloading the <a href="http://www.web2py.com/examples/default/download">latest</a> stable release.</p>

<p>Unpack the zip, run the web2py executable file, and choose an admin password.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_1642.png" alt="" /></p>

<h2>Create an App</h2>

<p>Click the Administrative Interface link on the right side of the page-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_1659.png" alt="" /></p>

<p>-and enter your password. The admin page shows your installed apps and provides an interface for creating and deploying new apps. On the right side of the page, under the <em>New simple application</em> header, type the name of a new app - in this example I used &#8220;helloWorld&#8221; - and then click Create.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_1704.png" alt="" /></p>

<p>You will then be redirected to the design interface page. You can also view the generic page for your app at this address - <a href="http://127.0.0.1:8000/helloWorld">http://127.0.0.1:8000/helloWorld</a>.</p>

<h2>Edit the App</h2>

<p>Back on the  page, click the edit button next to &#8220;default.py&#8221; in the Controllers section.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_2035.png" alt="" /></p>

<p>Then change the default code for the index function to-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_2046.png" alt="" /></p>

<p>Hit CTRL-S on your keyboard to save the changes, then refresh <a href="http://127.0.0.1:8000/helloWorld/default/index">http://127.0.0.1:8000/helloWorld/default/index</a> to see the changes made.</p>

<h2>Deploy the App</h2>

<p>Go back to the admin page (<a href="http://127.0.0.1:8000/admin/default/site">http://127.0.0.1:8000/admin/default/site</a>) and click Pack All. Save the  w2p-package to your computer.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-25_2317.png" alt="" /></p>

<p>Now you need to deploy the app to a cloud platform. The easiest one to use with web2py is <a href="https://www.pythonanywhere.com/">PythonAnywhere</a>. Go ahead and sign up. Once registered and logged in, click Web, Replace  with a new web app, and then click the button for web2py.</p>

<p>Enter an admin password, and then click Next. Once the app is setup, go to the admin interface at <a href="https://your_user_name.pythonanywhere.com/admin">https://user_name.pythonanywhere.com/admin</a> (replace user_name with your user name) and enter your admin password to log-in. Now, to create your app, go to the <em>Upload and install packed application</em> section on the right side, give your app a name (helloWorld), and finally upload the w2p-file you saved to your computer earlier. Click install.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-26_00141.png" alt="" /></p>

<p>Finally, go to your homepage to view the app at   (replace user_name with your user name).</p>

<p>You just deployed your first app - congrats!</p>

<hr />

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/BXzqmHx6edY "></iframe></div>


<br />


<p><em>In the next post, I&#8217;ll show you how to create a much more advanced web app. Cheers!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration of Content Creation Leads Google Towards the Slippery Slope of Monopolies]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/18/integration-of-content-creation-leads-google-towards-the-slippery-slope-of-monopolies/"/>
    <updated>2012-11-18T19:19:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/18/integration-of-content-creation-leads-google-towards-the-slippery-slope-of-monopolies</id>
    <content type="html"><![CDATA[<p>How are monopolies created? It seems weird that monopolies can still exist, but they are alive and well despite laws and regulations . With tech companies, it becomes surprisingly easy as they develop or acquire exclusive start-ups, technologies and patents. However, this normally means just temporary dominance in a certain industry until competitors catch up. A true monopoly like those of the 19th and 20th centuries arise when one company dominates every aspect of an industry. The company can then game the market forcing customers to buy their services at that the price and conditions they set. The company benefits from coordinating its services and forces out competitors that specialize or have fewer resources. In short, the company becomes the only game in town. Google faces this daunting boundary as it starts to acquire content producing companies and websites. Is it right for a search engine to also provide content when people rely on it to find content from the top providers?</p>

<h2>Google and Content Creation Not New</h2>

<p>While recent acquisitions raise the ire of consumer advocates, Google was on this path for a while. The biggest acquisition would be the purchase of the popular video website YouTube. YouTube is a veritable geyser of content creation by both professional companies and private users. Google for the time being, doesn&#8217;t really cross lines because YouTube is more of a platform for creative content than a direct source. However, certain practices on its search engine for YouTube point to possible conflicts of interest that signal a monopoly forming. For example, video results for the search engine put YouTube results before those of other media websites like Daily Motion or Veoh. This is a major problem for market competition when looking at how YouTube benefits from its integration with Google&#8217;s multi-billion dollar infrastructure. Is it fair for its competitors for YouTube to have such an advantage?</p>

<h2>From Content Finder To Content Producer</h2>

<p>The line gets more blurry as Google looks to provide its own native content for YouTube and other websites. Google recently purchased Next New Networks, a web TV production company. The company has a reputation for creating original content for online viewing producing several popular web shows and shorts. With the backing of a major company like Google and the wide reach of the YouTube platform, the company could soon compete with traditional media outlets like ABC and NBC Universal. The problem lies in how this conflicts with Google&#8217;s role as a search engine. Google could game search results to put its shows over other companies&#8217; products instead of relying on actual user response and interest. The worst part is that users could only detect something wrong after a significant period of time.</p>

<h2>Why Acquiring Content Providers Leads To Monopoly Of Search Results</h2>

<p>YouTube is a general platform. Even if Google provides content, the majority comes from other sources, even competitors like Microsoft and Apple. Google&#8217;s recent acquisition of Zagat and Frommer&#8217;s shows what happens when the company directly provides content for the search engines. Zagat and Frommer&#8217;s are sites that provide online travel guides and information. Its competitors are websites like Lonely Planet. As a subsidiary of Google, there are several ways the company can benefit on Google&#8217;s search engine. First, the site can get free sponsored adds and searches when users make relevant searches. This is the same as automatically getting to the top of the Google pages. This is unfair to competitors who have to climb the rankings the hard way through building up a following through good content and costly marketing. In essence Google could use its unfair advantage to dominate or acquire competitors in the online travel guide business. Google becomes more and more like the famous political cartoon of Standard Oil. It is an octopus with its tentacles in various web related sectors and industries using its collective advantages to push out legitimate competitors.</p>

<p>The issue is serious, and an interesting indicator of growing awareness about it was its use as a plot point in an episode of the popular Law Procedural/ Drama, The Good Wife. In a recent episode, two college students create a revolutionary voice software that a major search engine sabotages by altering the search results. The reason was they refused to sell their idea and the company buys their competitor and promotes them instead. The show raised the problem of providing direct legal evidence of the crime especially when the plaintiffs were bought out with jobs. Hopefully Google hasn&#8217;t reached that point yet, but the temptation to follow such actions eventually become irresistible.</p>

<h2>Customers May Act As Check</h2>

<p>Google is unique because its revenue <a href="http://venturebeat.com/2012/01/29/google-advertising/">comes</a> indirectly from advertising and depends on the users of its search engine and other products who see its ads. Its services are popular because customers rely on the impartiality of its algorithm to provide the most relevant content. If customers see Google tilting the board in their own favor, it could drive users to alternative search engines such as DuckDuckGo  and Bing. To avoid such scenarios Google has to follow the rules it now uses with YouTube allowing many content providers to use its new content services as a platform. This way it can maintain the separation it needs as a search engine. If not, regulators will step in and limit their actions in more detrimental ways.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Benefits of Performing a Cohort Analysis in Determining Engagement Over Time]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/16/the-benefits-of-performing-a-cohort-analysis-in-determining-engagement-over-time/"/>
    <updated>2012-11-16T18:57:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/16/the-benefits-of-performing-a-cohort-analysis-in-determining-engagement-over-time</id>
    <content type="html"><![CDATA[<p>A cohort analysis is a type of study which is mainly conducted by observation over a period of time. It works by analyzing a given group of individuals who have a trait or experience in common, within a given time. It is a great tool used in retaining customers and it is especially useful for business owners who have websites.</p>

<p>Since more visitors to the site generally translate into more business, it is important to retain these clients and monitor the regularity with which they come back.</p>

<p>The term engagement is used to describe the time that is spent accessing the product. It denotes frequency and it is essential to measure this level and analyze it as it relates to certain intervals.</p>

<p><strong>Examples:</strong></p>

<ol>
<li>Time to first purchase or engagement (e.g. follow, post, signup)</li>
<li>% activating in first day, week, month, etc. (B2C vs. B2B)</li>
<li>Repeat rate, 2x%2B repeat rate, 3x%2B repeat rate, etc.</li>
<li>How does first purchase (or engagement proxy) impact future revenue/engagement?</li>
<li>Email Opt-out behavior or member churn</li>
</ol>


<h2><strong>Benefits of Conducting an Effective Cohort Analysis</strong></h2>

<p><strong>Accuracy</strong></p>

<p>Performing a cohort analysis is a highly effective method of study as it helps to separate the clients into cohorts. Thus, individuals who joined the site during a particular period are grouped together e.g. the March cohort, the April cohort and so on. This way, the analysis of their engagement and how it has changed over time, is unaffected by the individuals in other groups, thus keeping the groups completely independent of one another; and facilitating a more accurate study.</p>

<p><strong>Providing a clear distinction between Growth and Engagement</strong></p>

<p>Separating the clients into cohorts is also effective in clearly defining a difference between growth metrics and engagement metrics. These two measurements can sometimes be confused with each other as growth is the successful addition of clients who use one&#8217;s product or service. Generally, added numbers automatically increase the overall engagement but it may only be the new clients who access the website, and will probably cease to do so after a while.</p>

<p>Performing a cohort analysis therefore helps one to make a distinction between the two and as a result, the rate of growth, which may be high, does not hide any issues that may need to be addressed as far as engagement or participation and interaction with the product, is concerned. These issues are therefore identified and effectively dealt with in order to facilitate higher retention.</p>

<p><strong>Effective Comparison of data between Cohorts</strong></p>

<p>A cohort analysis also helps one to compare the results between two or more groups. For instance, if the April cohort is more engaged in the product than the March cohort, an analysis may be required on any changes that may have occurred between the two months. In addition, a further analysis may be performed on the groups themselves to see whether the product is possibly appealing to a particular set of people and not another.</p>

<h2><strong>Studying a Wide Range of Data</strong></h2>

<p>By performing a cohort analysis, it is possible to effectively study data across the <a href="http://500hats.typepad.com/500blogs/2007/09/startup-metrics.html">five major metrics</a> (AARRR) for start-ups:</p>

<ul>
<li><em>Acquisition:</em> the cost of acquiring first-time users</li>
<li><em>Activation:</em> the speed at which clients are becoming active, including events, in addition to various actions on the website</li>
<li><em>Retention:</em> the ability to retain a client who is engaged in the service - they make purchases and are basically a source of recurring revenue</li>
<li><em>Referral:</em> rate at which people are inviting others to the site, as well as the rate at which the invitees yield to the invitations and actually visit the site</li>
<li><em>Revenue:</em> first point of purchase as far as the client is concerned.</li>
</ul>


<p>Each of these metrics is important and it is therefore essential that an eye be kept on them to recognize when changes need to be made. A cohort analysis enables one to do just that, without using multiple tools.</p>

<h2>Facilitating speedy Decision Making</h2>

<p>A cohort analysis also helps in identifying times when engagement in the site drops. Since it is a study that takes time into consideration, decisions can be made fast in an effort to rectify the problem areas that may have resulted in the drop. By factoring-in time, there is a clear temporal sequence when analyzing the relationship between first contact with the website, and consequent results.</p>

<hr />

<p>The video below illustrates how a cohort analysis is performed. In my opinion Excel is the best tool to use for cohort analysis as it&#8217;s much easier than say Mixpanel or Kissmetrics - plus you get your hands dirty and (hopefully) gain an understanding of your data. Although, I really do like <a href="http://blog.rjmetrics.com/see-what-drives-repeat-business-in-your-rjmetrics-online-dashboard/">RJMetrics</a> for cohort analysis as well.</p>

<p>In the video, dummy data has been used on the premise that the business has been operating for an entire year.</p>

<p>That said the data has been generated from real data, which I obtained using <a href="https://zapier.com/">Zapier</a>. With Zapier, you can easily source data from hundreds of locations like <a href="https://zapier.com/blog/2012/09/18/making-salesforce-work-with-your-favorite-apps/">Salesforce</a>, ZenDesk, Zoho, MySQL, and <a href="https://zapier.com/blog/2012/07/01/shopify-integrations-boost-retention-increase-upsales-and-provide-killer-customer-support/">Shopify</a>.</p>

<p>The video begins with showing you how to divide the users of a service into cohorts, based on the time that they first subscribed for the services. The retention rate has also been included. These values are obtained by dividing the number of users, who are still subscribing after a particular month, by the total number of users who started in each category. The average retention rate is therefore obtained by calculating the average across the cohort.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/2QZQolcLo6M "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[51 New Excel 2013 Functions]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/09/51-new-excel-2013-functions/"/>
    <updated>2012-11-09T15:50:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/09/51-new-excel-2013-functions</id>
    <content type="html"><![CDATA[<p><em>Excel 2013 promises greater functionality and the ability to more quickly input and analyze data. Although this version of Excel uses some of the same functions as older versions, you should learn the 51 new functions to make sure you don&#8217;t miss out on something that could become a favorite resource. In addition, some older functions may become obsolete as Microsoft continues to create updated versions of Excel. Check out the latest Office has to offer with the following new functions.</em></p>

<p><em>You can also download an XLSX version <a href="http://backwardsteps.com/tutorials/excel%202013%20functions.xlsx">here</a>, comparing the Excel descriptions of each function to my descriptions and examples.</em></p>

<h2><strong>Date and Time Functions</strong></h2>

<p><strong>DAYS</strong> returns the number of days between two dates. For example, if you input that you received a payment on 1/01/2013 and another payment on 1/13/2013, the DAYS function tells you that the payments were spaced 12 days apart.</p>

<p><strong>ISOWEEKNUM</strong> returns the week number according to ISO standards. Followed by most European countries, the International Organization for Standardization (ISO 8601) states that all weeks begin on a Monday. Further, the first week of the year starts with the week that the first Thursday and January 4th fall within in. For example, 1/01/2012 is part of week 52 of 2011. Week 1 of 2012 begins on 1/02/2012 (Monday) and ends on 1/08/2012 (Sunday). Compare this function to the WEEKDAY function to gain a better understanding.</p>

<h2><strong>Engineering Functions</strong></h2>

<p><strong>BITAND</strong> runs the bitwise operation AND on two numbers. It converts them into binary code and returns 1 if and only if both numbers convert to 1 in binary; otherwise, it returns 0.</p>

<p><strong>BITOR</strong> runs the bitwise operation OR, which sets a bit to 1 if it finds any 1&#8217;s in the two bits and sets the bit to 0 if not. For example, BITOR will set the two bits 1 &amp; 0 to 1 and 0 &amp; 0 to 0.</p>

<p><strong>BITXOR</strong>, which is short for EXCLUSIVE OR, compares two bits and sets them to 1 if they are different and 0 if they are the same. For example, the bits 1 &amp; 0 become 1 while 1 &amp; 1 become 0.</p>

<p><strong>BITRSHIFT</strong> shifts bits to the right by a specified amount. For example, shifting by 1 moves all the bits in a sequence over to the right by 1, so that 000110 becomes 000011.</p>

<p><strong>BITLSHIFT</strong> shifts bits to the left by a specified amount. For example, shifting by 1 moves all the bits in a sequence over to the left by 1 so that 000110 becomes 001100.</p>

<p><strong>IMCOSH</strong> returns the hyperbolic cosine of a complex number. For example, if you want to get the hyperbolic cosine of 5 + 3i, running this function returns a result including both real and imaginary numbers. You must run this function in the format =IMCOSH(&#8220;5+3i&#8221;).</p>

<p><strong>IMCOT</strong> returns the hyperbolic cotangent of a complex number. You could change IMCOSH to IMCOT to calculate the hyperbolic cotangent of 5 + 3i.</p>

<p><strong>IMCSC</strong> provides the cosecant of a complex number. Note: this is not the hyperbolic cosecant; it is the trigonometric cosecant.</p>

<p><strong>IMCSCH</strong> provides the hyperbolic cosecant of a complex number. If you need this function, make sure you add the H on the end of the function so that you get the hyperbolic cosecant rather than the trigonometric cosecant.</p>

<p><strong>IMSEC</strong> provides the trigonometric secant of a complex number. As with cosecants, make sure you are using the correct function in order to get the type of secant you want.</p>

<p><strong>IMSECH</strong> provides the hyperbolic secant of a complex number. You can run this function by adding an H onto the end of the trigonometric function and rerunning. For example, if you had calculated the trigonometric secant of 5 + 3i by typing =IMSEC(&#8220;5+3i&#8221;) you could then run the hyperbolic secant by changing IMSEC to IMSECH.</p>

<p><strong>IMSINH</strong> calculates the hyperbolic sine of a complex number. As with all the other hyperbolic functions, simply place the expression in quotes that you want to run. For example, you could type =IMSINH(&#8220;5+3i&#8221;).</p>

<p><strong>IMTAN</strong> calculates the tangent of a complex number, such as the tangent of 5+3i.</p>

<h2><strong>Financial Functions</strong></h2>

<p><strong>PDURATION</strong> calculates how many periods are needed for an investment to reach a specific value. For example, if you want to know how long it&#8217;ll take for your investment (present value) to be worth $10,000 (future value), PDURATION can calculate how many periods you can expect to have to wait (depending on the interest rate).</p>

<p><strong>RRI</strong> is the complementary value to PDURATION. Instead of calculating how my periods are needed for the investment to reach a specific value, it calculates the interest rate on the investment if you know how long it will take to reach the value. For example, if PDURATION calculates that it will take 10 years for your investment to grow from $5,000 to $10,000, RRI can calculate an interest rate of 7.2 percent.</p>

<h2><strong>Information Functions</strong></h2>

<p><strong>ISFORMULA</strong>  checks whether a specific cell contains a formula. If yes, the result is &#8220;TRUE&#8221;; and if no, the result is &#8220;FALSE.&#8221;</p>

<p><strong>SHEET</strong> tells you which number sheet you are working with. For example, if you have 10 worksheets in a workbook and are working with the second worksheet created, SHEET will return a value of 2.</p>

<p><strong>SHEETS</strong> tells you how many sheets are in the workbook you are working with. For example, if there are 10 worksheets in the workbook, the SHEETS function will return a value of 10.</p>

<h2><strong>Logical Functions</strong></h2>

<p><strong>IFNA</strong> returns a specific value that you set if an expression resolves to N/A. Otherwise, it returns the expression&#8217;s value. For example, if you have a spreadsheet that has listings for different cities, you can use an IFNA function to return the expression, &#8220;Sorry, not found&#8221; if you search for a city that is not in the database using VLOOKUP.</p>

<p><strong>XOR</strong> tests whether any of the parameters you set are true. If any parameter is true, it returns a value of &#8220;true.&#8221; Otherwise it returns a value of &#8220;false.&#8221; For example, if you use XOR to test whether your sales are greater than $500, your profit is more than 20 percent of your sales and you have at least 20 new customers this month, you will get a response of &#8220;true&#8221; if any of those criteria are met.</p>

<h2><strong>Lookup and Reference Functions</strong></h2>

<p><strong>FORMULATEXT</strong> shows you the formula that is listed in a particular cell so that you can see it and check for any errors. For example, if you run =FORMULATEXT(R1) in cell R4, it puts the formula found at R1 into R4.</p>

<h2><strong>Math and Trigonometry Functions</strong></h2>

<p><strong>ACOT</strong> calculates the arccotangent of a particular number. You need to use real numbers to use this function. For example, if the cotangent is 2, you can run ACOT(2) to find out the arccotangent. ACOT calculates arccotangents in radians.</p>

<p><strong>ACOTH</strong> calculates the hyperbolic arccotangent rather than the standard arccotangent. For example, you can use ACOTH(2) to find the hyperbolic arccotangent of 2.</p>

<p><strong>ARABIC</strong> converts numerals from Roman to Arabic. For example, you can run ARABIC(XIII) to get the result of &#8220;13.&#8221; You can also tell ARABIC to convert the contents of a cell into Arabic numerals For example, if cell A2 contains the number CXLIII, you can run ARABIC(A2) to get the result &#8220;143.&#8221;</p>

<p><strong>BASE</strong> converts hexadecimal numbers into numbers of whatever base you want with a specified minimum length. For example, you can convert hexidecimal numbers into base 2 with a minimum length of 10 using this function.</p>

<p><strong>CEILING.MATH</strong> rounds numbers up according you your specifications. You can either round numbers up to the nearest integer or the nearest multiple. For example, you can round 8.76 up to 9 (the nearest integer) or up to the nearest multiple of 5, which would be 10. You can also specify whether you want to round negative numbers towards zero or away from zero.</p>

<p><strong>COMBINA</strong> returns the number of combinations for a given number, including repetitions. For example, if you want to know how many three-letter combinations of a five-letter set are possible, you would run COMBINA (5,3) to get an answer of 35.</p>

<p><strong>COT</strong> gives you the cotangent of an angle in radians. You need to know the measurement of the angle in radians to run this function. For example, you can run COT(5) to find out the cotangent in radians of a 5-radian angle.</p>

<p><strong>COTH</strong> gives you the hyperbolic cotangent of a hyperbolic angle. For example, if your hyperbolic angle is 5, run COTH(5). Be careful not to mix COTH and COT up as they are different types of cotangents.</p>

<p><strong>CSC</strong> calculates the cosecant in radians of an angle. Make sure that you convert the angle to radians if you measure it in degrees. For example, if you have a 142 degree angle, convert it to 2.478 radians before running CSC(2.478) to find the cosecant.</p>

<p><strong>CSCH</strong> calculates the hyperbolic cosecant of an angle in radians. Run CSCH(angle) to get this result; make sure you only run CSCH if you want the hyperbolic cosecant, not the standard cosecant.</p>

<p><strong>DECIMAL</strong> converts a number into hexadecimal format. You need to know the base the number is written in so that you can convert it appropriately. For example, you can convert FF from base 16 to the hexadecimal equivalent, which is 255, using this function.</p>

<p><strong>FLOOR.MATH</strong> is the opposite of CEILING.MATH; it rounds numbers <em>down</em> to the nearest integer or multiple. For example, you could round 8.142 down to 8 or down to 6 (the nearest multiple of 3) using FLOOR.MATH.</p>

<p><strong>ISO.CEILING</strong> is similar to CEILING.MATH but does not take sign into account. For example, with CEILING.MATH you can ask it to round -3.41  further away from zero (-4) because of the sign. ISO.CEILING will round this number to -3 unless you specify a multiple such as nearest multiple of 2, in which case it will round up to -2.</p>

<p><strong>MUNIT</strong> displays a matrix of a dimension you specify, which needs to be entered as an array. For example, MUNIT(3) returns a 3x3 matrix.</p>

<p><strong>SEC</strong> calculates the secant of an angle in radians. For example, you can run SEC(2.478) to find the secant of an angle that measures 2.478 radians.</p>

<p><strong>SECH</strong> calculates the hyperbolic secant of an angle in radians. Use this function only for hyperbolic, not standard, secants of angles.</p>

<h2><strong>Statistical Functions</strong></h2>

<p><strong>BINOM.DIST.RANGE</strong> calculates the statistical probability of an outcome based on the results of a trial, using a binomial distribution curve. To perform this calculation, you need to know how many trials were performed and how many were successful. You also need to know the probability of success. For example, if your trial was flipping a coin 50 times to try to get heads and you got 10 heads, you would run BINOM.DIST.RANGE(50,.5,10).</p>

<p><strong>GAMMA</strong> returns the gamma value of a number. For example, GAMMA(132) calculates the gamma function of 132.</p>

<p><strong>GAUSS</strong> calculates the probability that a member of a standard normal population will fall somewhere between the mean and a specific number of standard deviations from the mean. For example, if you want to calculate the probability that somebody&#8217;s test results will be less than three standard deviations from the mean, you would run GAUSS(3).</p>

<p><strong>PERMUTATIONA</strong> calculates the number of permutations including repetitions that are possible for a particular set. To use this function, you need to know the number of objects in the set and the number that will be chosen.</p>

<p><strong>PHI</strong> determines the phi value, or the value of the density function for a standard normal distribution. For example, PHI (1.43) calculates the density function for a standard normal distribution with a value of 1.43.</p>

<p><strong>SKEW.P</strong> tells you how much a distribution is skewed based on its population. Usually, you input the data from the population then run SKEW.P on the entire data set.</p>

<h2><strong>Text Functions</strong></h2>

<p><strong>NUMBERVALUE</strong> changes text to numbers based on locale-independent method. For example, 3.5% will be converted into .035.</p>

<p><strong>UNICHAR</strong> converts a number into the unicode character associated with that number. For example, UNICHAR(66) returns a value of B.</p>

<p><strong>UNICODE</strong> is the complement of UNICHAR; it returns the number associated with a particular character. For example, UNICODE(B) returns a value of 66.</p>

<h2><strong>Web Functions</strong></h2>

<p><strong>ENCODEURL</strong> converts a string of text into URL code so that you can filter results of a database. For example, ENCODEURL(&#8220;michael herman&#8221;) returns michael%20herman.</p>

<p><strong>FILTERXML</strong> returns XML data from a specified XML path. You must provide the XML.</p>

<p><strong>WEBSERVICE</strong> returns data from an online service. You must provide the URL for WEBSERVICE to draw from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursively Scraping Web Pages with Scrapy]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/08/recursively-scraping-web-pages-with-scrapy/"/>
    <updated>2012-11-08T15:39:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/08/recursively-scraping-web-pages-with-scrapy</id>
    <content type="html"><![CDATA[<p><em>In the first <a href="http://mherman.org/blog/2012/11/05/scraping-web-pages-with-scrapy/">tutorial</a>, I showed you how to write a crawler with Scrapy to scrape Craiglist Nonprofit jobs in San Francisco and store the data to a CSV file. This tutorial continues from where we left off, adding to the existing code, in order to build a recursive crawler to scrape multiple pages. Make sure you read the first tutorial first.</em></p>

<p><strong>CrawlSpider:</strong> Last time, we created a new Scrapy project, updated the Item Class, and then wrote the spider to pull jobs from a single page. This time, we just need to do some basic changes to add the ability to follow links and scrape more than one page. The first change is that this spider will inherit CrawlSpider and not BaseSpider.</p>

<p><strong>Rules: </strong>We need to add in some Rules objects to define how the crawler follows the links. We will be using the following <a href="https://scrapy.readthedocs.org/en/latest/topics/spiders.html?highlight=crawlspider#crawling-rules">rules</a>:</p>

<ul>
<li><em>SgmlLinkExtractor: </em>defines how you want the spider to follow the links

<ul>
<li><em>allow:</em> defines the link href</li>
<li><em>restrict_xpaths: </em>restricts the link to a certain Xpath</li>
</ul>
</li>
<li><em>callback: </em>calls the parsing function after each page is scraped*</li>
<li><em>follow: </em>instructs whether to continue following the links as long as they exist</li>
</ul>


<p>*Please Note: Make sure you rename the parsing function to something besides &#8220;parse&#8221; as the CrawlSpider uses the parse method to implement its logic.</p>

<p><em><em>Release:</em> </em>Once updated, the final code looks like this:</p>

<pre><code>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from craigslist_sample.items import CraigslistSampleItem

class MySpider(CrawlSpider):
    name = "craigs"
    allowed_domains = ["sfbay.craigslist.org"]
    start_urls = ["http://sfbay.craigslist.org/npo/"]   

    rules = (Rule (SgmlLinkExtractor(allow=("index\d00\.html", ),restrict_xpaths=('//p[@id="nextpage"]',))
    , callback="parse_items", follow= True),
    )

    def parse_items(self, response):
        hxs = HtmlXPathSelector(response)
        titles = hxs.select("//p")
        items = []
        for titles in titles:
            item = CraigslistSampleItem()
            item ["title"] = titles.select("a/text()").extract()
            item ["link"] = titles.select("a/@href").extract()
            items.append(item)
        return(items)
</code></pre>

<p>Now run the following command to release the spider and save the scraped data to a CSV file:</p>

<pre><code>scrapy crawl craigs -o items.csv -t csv
</code></pre>

<p><em>In essence, this spider started crawling at http://sfbay.craigslist.org/npo/ and then followed the &#8220;next 100 postings&#8221; link at the bottom, scraping the next page, until there where no more links to crawl. Again, this can be used to create some powerful crawlers, so use with caution and set delays to throttle the crawling speed if necessary.</em></p>

<p>You can find the source code on <a href="https://github.com/mjhea0/Scrapy-Samples">Github</a>.</p>

<hr />

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/P-_TpZ54Vcw "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping Web Pages with Scrapy]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/05/scraping-web-pages-with-scrapy/"/>
    <updated>2012-11-05T14:59:00-08:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/05/scraping-web-pages-with-scrapy</id>
    <content type="html"><![CDATA[<p><em>This is a simple tutorial on how to write a crawler using Scrapy (BaseSpider) to scrape and parse Craigslist Nonprofit jobs in San Francisco and store the data to a CSV file. If you don&#8217;t have any experience with Scrapy, start by reading this <a href="http://doc.scrapy.org/en/latest/intro/tutorial.html">tutorial</a>. Also, I assume that you are familiar with Xpath; if not, please read the Xpath basic <a href="http://w3schools.com/xpath/">tutorial</a> on w3schools. Enjoy!</em></p>

<p><strong>Installation:</strong> Start by <a href="http://scrapy.org/">downloading</a> and installing Scrapy and all its dependencies. Refer to this <a href="http://www.youtube.com/watch?v=eEK2kmmvIdw">video</a>, if you need help.</p>

<p><strong>Create Project:</strong> Once installed, open your terminal and create a Scrapy project by navigating to the directory you&#8217;d like to store your project in and then running the following command:</p>

<pre><code>scrapy startproject craigslist_sample
</code></pre>

<p><strong>Item Class:</strong> Open the items.py within the ~craigslist_sample\craigslist_sample directory. Edit the items.py file to define the fields that you want contained with the Item. Since we want the post title and subsequent URL, the Item class looks like this:</p>

<pre><code># Define here the models for your scraped items

from scrapy.item import Item, Field

class CraigslistSampleItem(Item):
    title = Field()
    link = Field()
</code></pre>

<p><strong>The Spider:</strong> The spider defines the initial URL (http://sfbay.craigslist.org/npo/), how to follow links/pagination (if necessary), and how to extract and parse the fields defined above. The spider must define these attributes:</p>

<ul>
<li><em>name</em>: the spider&#8217;s unique identifier</li>
<li><em>start_urls</em>: URLs the spider begins crawling at</li>
<li><em>parse</em>: method that parses and extracts the scraped data, which will be called with the downloaded Response object of each start URL</li>
</ul>


<p>You also need to use the HtmlXpathSelector for working with Xpaths. Visit the Scrapy <a href="http://doc.scrapy.org/en/0.16/">tutorial</a> for more information. The following is the code for the basic spider:</p>

<pre><code>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from craigslist_sample.items import CraigslistSampleItem

class MySpider(BaseSpider):
    name = "craig"
    allowed_domains = ["craigslist.org"]
    start_urls = ["http://sfbay.craigslist.org/npo/"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        titles = hxs.select("//p")
        for titles in titles:
            title = titles.select("a/text()").extract()
            link = titles.select("a/@href").extract()
            print title, link
</code></pre>

<p>Save this in the ~\craigslist_sample\craigslist_sample\spiders directory as test.py.</p>

<p><strong>Trial:</strong> Now you are ready for a trial run of the scraper. So, while in the root directory of your Scrapy project, run the following command to output the scraped data to the screen:</p>

<pre><code>scrapy crawl craig
</code></pre>

<p><strong>Dicts:</strong> The Item objects defined above are simply custom dicts. Use the standard dict syntax to return the extracted data inside the Item objects:</p>

<pre><code>item = CraigslistSampleItem()
item ["title"] = titles.select("a/text()").extract()
item ["link"] = titles.select("a/@href").extract()
</code></pre>

<p><strong>Release:</strong> Once complete, the final code looks like this:</p>

<pre><code>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from craigslist_sample.items import CraigslistSampleItem

class MySpider(BaseSpider):
    name = "craig"
    allowed_domains = ["craigslist.org"]
    start_urls = ["http://sfbay.craigslist.org/npo/"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        titles = hxs.select("//p")
        items = []
        for titles in titles:
            item = CraigslistSampleItem()
            item ["title"] = titles.select("a/text()").extract()
            item ["link"] = titles.select("a/@href").extract()
            items.append(item)
        return items
</code></pre>

<p><strong>Store the data: </strong>The scraped data can now be <a href="http://doc.scrapy.org/en/0.16/topics/feed-exports.html#topics-feed-exports">stored</a> in these formats- JSON, CSV, and XML (among others). Run the following command to save the data in CSV:</p>

<pre><code>scrapy crawl craig -o items.csv -t csv
</code></pre>

<p>You should now have a CSV file in your directory called items.csv full of data:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-11-05_1411.png" alt="" /></p>

<p><em>Although this is relatively simple tutorial, there are still powerful things you can do by just customizing this basic script. Just remember to not overload the server on the website you are crawling. Scrapy allows you to set <a href="https://scrapy.readthedocs.org/en/latest/topics/settings.html?highlight=delay#download-delay">delays</a> to throttle the crawling speed.</em></p>

<hr />

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/1EFnX1UkXVU "></iframe></div>


<hr />

<p><em>In my next post I&#8217;ll show how to use Scrapy to  recursively crawl a site by following links. Until then, you can find the code for this project on <a href="https://github.com/mjhea0/Scrapy-Samples">Github</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sentiment Analysis: Feelings, not Facts]]></title>
    <link href="http://mjhea0.github.com/blog/2012/10/19/sentiment-analysis-feelings-not-facts/"/>
    <updated>2012-10-19T14:32:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/10/19/sentiment-analysis-feelings-not-facts</id>
    <content type="html"><![CDATA[<p>Sentiment analysis is a process, which gathers the latest input from a human source or several human sources and uses it to determine the general opinion of a person, place or thing. For example, the old-fashioned comment boxes and comment cards is a form of sentiment analysis. Often called opinion gathering, sentiment analysis can be generated from various technological sources, like Twitter or Facebook. Like the old fashioned comment box, sentiment analysis can help owners or managers find the strengths and weaknesses of a business.</p>

<p>Sentiment analysis, using modern social media platforms, benefits your business by giving a true grasp of what the customers think about the business. Customers will say exactly what they think as social media has a cloak of anonymity associated with it. They often will say names and help you pinpoint the best and worst of your employees. Sentiment analysis is important to your business as it aids in evaluation and discovery of the need for new products, services, and improvements.  For example, if a reoccurring tweet on twitter addresses the awful paint on the wall, the business can address the ambiance issue. In addition, the international nature of social media ensures that plenty of people will read the sentiment and adjust their behavior accordingly.</p>

<p>A single opinion posted on the web can damage a business&#8217;s image quickly. And finding opinions on the web takes only a rudimentary knowledge of search engine. Think of the social media as technical, international version of word-of-mouth. A single opinion can spread like gasoline and a match. Making sentiment analysis of social platforms part of the business&#8217;s regular routine will help the person in charge limit the damage.</p>

<p>On the other hand, a good comment on social media can bring in more customers.  Performing sentiment analysis on twitter and other social media platforms let the business owner market based on the positive sentiment. After all, if one person likes something, such a certain product or customer service, then others will like it, too.</p>

<p>That&#8217;s why sentiment analysis is important to businesses. It allows business owners or managers to keep their finger on the pulse of their business. The most successful businesses know that customers are the life blood of the business and their opinion matters. Gone are the days of hardwood boxes and paper forms, but sentiment analysis is still just as important to the success of a business. Business owners and managers use it to improve every aspect of their business. How would you use sentiment analysis to improve your business?</p>

<hr />

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/YmOYrozqCps "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Differentiating Between Bounce Rates]]></title>
    <link href="http://mjhea0.github.com/blog/2012/10/06/differentiating-between-bounce-rates/"/>
    <updated>2012-10-06T14:09:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/10/06/differentiating-between-bounce-rates</id>
    <content type="html"><![CDATA[<p>Understanding your site&#8217;s bounce rate is essential to your online presence success.</p>

<p>A low bounce rate signifies ineffectiveness and lost revenue. A high bounce rate signifies your visitors are meeting your objectives and taking action.</p>

<p>Bounce rate is defined as percentage of visitors who come onto your site and leave your page, or site, after not clicking anywhere else on your site. It is a metric tool that measures the quality of your web pages.</p>

<p>You must understand that bounce rate and exit rate are not the same. Bounce rate is the percentage of people who visit any page of your site without going further. They click off within seconds, or even a split second. Exit rate, on the other hand, is when people leave your site after staying for more than a few seconds. Every visitor needs to exit your website, not every one needs to bounce off.</p>

<p>Before you can differentiate between different types of bounce rates, you must analyze different traffic sources. You need to determine where your traffic comes from and what their bounce rates are. If your incoming traffic sources have poor bounce rates, it will reflect poorly on your rate. The largest amount of converting traffic sources include search engine traffics, email marketing campaigns and affiliate campaigns.</p>

<p><strong>When analyzing your incoming traffic, forget about unqualified sources such as social media sites, unknown referrer sites and random directory sites.</strong></p>

<p>Google Analytics is a wonderful tool for analyzing bounce rates. Combining the data obtained from Google Analytics with the spreadsheet capabilities of Excel 2013 will highlight which pages have increased bounce rates.</p>

<p><strong>Increased bounce rates occur for a variety of reasons including outdated and stale web content, ineffective ad-words and your competition changing tactics. Tactics include enhancing a marketing campaign, implementing effective ad-words, updating web content and reducing prices.</strong></p>

<p>The effectiveness of your keywords, and phrases, will affect your bounce rate. Effective keywords, which provide visitors with information they are looking for, will result in lower bounce rates. On the other hand, if your website uses ineffective keywords, your visitor will leave as soon as they realize your site is not appropriate. Nothing is more frustrating in the Internet world than typing in a keyword or keyword phrase and being taken to a website that has nothing to do with what is being searched for.</p>

<p><strong>Analyze the keywords on every page of your website with a website analyzer tool like Google Analytics. Make adjustments as needed.</strong></p>

<p>Does your landing page contain action-oriented language that stimulates interest? Is the information specific and user-friendly? Is content organized optimally? Then, your bounce rate will be lower since visitors want to stay on your page. They will also be more inclined to view other pages on your site.</p>

<p>On the other hand, if your landing page is generalized and/or leads your visitor on a clicking search, your bounce rate will be high. Your landing page will not meet your visitor&#8217;s expectations and they will quickly leave.</p>

<p><strong>Bounce rates directly impacts your ROI and revenues. They can point out which information/pages need revisions, increase your conversion rate, highlight where you are wasting your money and help you focus in on your objectives. Are you using them to your advantage?</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping with Regular Expressions]]></title>
    <link href="http://mjhea0.github.com/blog/2012/10/05/web-scraping-with-regular-expressions/"/>
    <updated>2012-10-05T13:26:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/10/05/web-scraping-with-regular-expressions</id>
    <content type="html"><![CDATA[<p><strong>Problem:</strong>You need to extract and parse all the headers and links from a web site or an XML feed, and then dump the data into a CSV file.</p>

<p><strong>Import modules:</strong></p>

<pre><code>import csv
from urllib import urlopen
import re`
</code></pre>

<p><strong>Perform html/xml query, grab desired fields, create a range:</strong></p>

<pre><code>xml = urlopen("http://www.tableausoftware.com/public/feed.rss").read()

xmlTitle = re.compile("&amp;lt;title&amp;gt;(.*)&amp;lt;/title&amp;gt;")
xmlLink = re.compile("&amp;lt;link&amp;gt;(.*)&amp;lt;/link&amp;gt;")

findTitle = re.findall(xmlTitle,xml)
findLink = re.findall(xmlLink,xml)

iterate = []
iterate[:] = range(1, 25)
</code></pre>

<p><strong>Open CSV file:</strong></p>

<pre><code>writer = csv.writer(open("pytest.csv", "wb"))
</code></pre>

<p><strong>Write header to CSV file (you want to do this before you enter the loop):</strong></p>

<pre><code>head = ("Title", "URL")
writer.writerow(head)
</code></pre>

<p><strong>Write the For loop to iterate through the XML file and write the rows to the CSV file:</strong></p>

<pre><code>for i in iterate:
    writer.writerow([findTitle[i], findLink[i]])
</code></pre>

<p><strong><em>Final Script:</em></strong></p>

<pre><code>#!/usr/bin/env python

import csv
from urllib import urlopen
import re

# Open and read HTMl / XML
xml = urlopen("http://www.tableausoftware.com/public/feed.rss").read()

# Grab article titles and links using regex
xmlTitle = re.compile("&amp;lt;title&amp;gt;(.*)&amp;lt;/title&amp;gt;")
xmlLink = re.compile("&amp;lt;link&amp;gt;(.*)&amp;lt;/link&amp;gt;")

# Find and store the data
findTitle = re.findall(xmlTitle,xml)
findLink = re.findall(xmlLink,xml)

#Iterate through the articles to create a range
iterate = []
iterate[:] = range(1, 25)

# Open the CSV file, write the headers
writer = csv.writer(open("pytest.csv", "wb"))
head = ("Title", "URL")
writer.writerow(head)

# Using a For Loop, write the results to the CSV file, row by row
for i in iterate:
    writer.writerow([findTitle[i], findLink[i]])
</code></pre>

<hr />

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/DcZTNwdWVeo "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import data from Excel into MySQL using Python]]></title>
    <link href="http://mjhea0.github.com/blog/2012/09/30/import-data-from-excel-into-mysql-using-python/"/>
    <updated>2012-09-30T13:13:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/09/30/import-data-from-excel-into-mysql-using-python</id>
    <content type="html"><![CDATA[<p>I just finished a basic Python script for a client that I&#8217;d like to share with you. He needed an easy means of moving data back and forth between MySQL and Excel, and sometimes he needed to do a bit of manipulation between along the way. In the past I may have relied solely on VBA for this, but I have found it to be much easier with Python. In this post and the accompanying video, I show just part of the project - importing data from Excel into MySQL via Python. Let&#8217;s get started.</p>

<p>Assuming you have Python installed (I&#8217;m using version 2.7), download and install the xlrd library and MySQLdb module-</p>

<ul>
<li><a href="http://pypi.python.org/pypi/xlrd">http://pypi.python.org/pypi/xlrd</a></li>
<li><a href="http://sourceforge.net/projects/mysql-python/">http://sourceforge.net/projects/mysql-python/</a></li>
</ul>


<p>Then tailor the following script to fit your needs:</p>

<pre><code>import xlrd
import MySQLdb

# Open the workbook and define the worksheet
book = xlrd.open_workbook("pytest.xls") 
sheet = book.sheet_by_name("source")

# Establish a MySQL connection
database = MySQLdb.connect (host="localhost", user = "root", passwd = "", db = "mysqlPython")

# Get the cursor, which is used to traverse the database, line by line
cursor = database.cursor()

# Create the INSERT INTO sql query
query = """INSERT INTO orders (product, customer_type, rep, date, actual, expected, open_opportunities, closed_opportunities, city, state, zip, population, region) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""

# Create a For loop to iterate through each row in the XLS file, starting at row 2 to skip the headers
for r in range(1, sheet.nrows):
        product     = sheet.cell(r,).value
        customer    = sheet.cell(r,1).value
        rep         = sheet.cell(r,2).value
        date        = sheet.cell(r,3).value
        actual      = sheet.cell(r,4).value
        expected    = sheet.cell(r,5).value
        open        = sheet.cell(r,6).value
        closed      = sheet.cell(r,7).value
        city        = sheet.cell(r,8).value
        state       = sheet.cell(r,9).value
        zip         = sheet.cell(r,10).value
        pop         = sheet.cell(r,11).value
        region  = sheet.cell(r,12).value

        # Assign values from each row
        values = (product, customer, rep, date, actual, expected, open, closed, city, state, zip, pop, region)

        # Execute sql Query
        cursor.execute(query, values)

# Close the cursor
cursor.close()

# Commit the transaction
database.commit()

# Close the database connection
database.close()

# Print results
print ""
print "All Done! Bye, for now."
print ""
columns = str(sheet.ncols)
rows = str(sheet.nrows)
print "I just imported " %2B columns %2B " columns and " %2B rows %2B " rows to MySQL!"
</code></pre>

<p>Hope this is useful. More to come!</p>

<hr />

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/YLXFEQLCogM "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Predictive Analytics - Top 5 Trends Going Forward]]></title>
    <link href="http://mjhea0.github.com/blog/2012/09/01/predictive-analytics-top-5-trends-going-forward/"/>
    <updated>2012-09-01T12:50:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/09/01/predictive-analytics-top-5-trends-going-forward</id>
    <content type="html"><![CDATA[<p>At one time, when a business or IT person spoke of &#8220;business analytics,&#8221; they were talking primarily about reporting. Today, the reporting function would more likely be termed &#8220;business intelligence&#8221;  Business analytics has evolved and expanded into an area that just five years ago was considered the exclusive domain of the technically esoteric; predictive analytics, or, the ability to take data and turn it into actionable information.  Like airlines with their sophisticated yield management algorithms, businesses are trying to determine who will do what, when and for what price?</p>

<p>There are a number of trends beginning to surface on the predictive analytics front, and all promise to improve  the way  business is conducted.  Some of the top trends include the following:</p>

<ul>
<li><p><strong>Big Data</strong>.  Until recently, big data consisted of disconnected bits of information from social networking, tweets, emails, RFIDs etc. wandering aimlessly through the ether.  But now, the technology (Hadoop, for example) exists to gather and analyze this massive information bank. More and more, big data will become a cornerstone of predictive analytics.</p></li>
<li><p><strong>Expansion of the user base</strong>.  As predictive analysis tools become more user friendly, they will become a more accessible resource for business users.  This will create the critical mass necessary to make predictive analytics a common practice, and will spur the continued development of new and better tools.</p></li>
<li><p><strong>The Cloud</strong>.  This goes hand in hand with item 2.  Just as better software tools will expand user access to predictive analytics, the cloud will expand company access by eliminating the need for expensive infrastructure investment and maintenance. However, some are skeptical that the cloud will play a major role in the near term. Gartner, for example, predicts a penetration of just 3% of the market in 2013.</p></li>
<li><p><strong>Mobile</strong>.  Everything is going mobile these days, including applications devoted to predictive analytics.  Tools that aren&#8217;t mobile-enabled will fall behind, regardless of their effectiveness.  As such, the push by software vendors to develop solutions that are enabled for mobile devices will continue at a rapid pace.</p></li>
<li><p><strong>Support for Unstructured Data Analysis</strong>. Software vendors today are providing solutions that can marry structured data with unstructured data.  From a predictive analytics standpoint, this is a huge value add.  By being able to include comments and notes, for example, a predictive model can contain much more complete and accurate data, and increase its accuracy.</p></li>
</ul>


<p>These are five of the top trends in predictive analytics today, but in a field that is rapidly evolving and expanding, there is no guarantee that tomorrow won&#8217;t bring new technologies, new trends, and new opportunities.  One thing is abundantly clear, however; the days of decision-making by crystal ball or simply looking backward are gone forever.</p>
]]></content>
  </entry>
  
</feed>
